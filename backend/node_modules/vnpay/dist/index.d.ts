import { BinaryLike } from "crypto";

/**
 * @see https://sandbox.vnpayment.vn/apis/docs/loai-hang-hoa/
 */
declare enum ProductCode {
	Food_Consumption = "100000",
	Phone_Tablet = "110000",
	ElectricAppliance = "120000",
	Computers_OfficeEquipment = "130000",
	Electronics_Sound = "140000",
	Books_Newspapers_Magazines = "150000",
	Sports_Picnics = "160000",
	Hotel_Tourism = "170000",
	Cuisine = "180000",
	Entertainment_Training = "190000",
	Fashion = "200000",
	Health_Beauty = "210000",
	Mother_Baby = "220000",
	KitchenUtensils = "230000",
	Vehicle = "240000",
	Pay = "250000",
	AirlineTickets = "250007",
	CardCode = "260000",
	Pharmacy_MedicalServices = "270000",
	Other = "other",
}

declare enum UrlService {
	sandbox = "https://sandbox.vnpayment.vn/paymentv2/vpcpay.html",
}
declare enum HashAlgorithm {
	SHA256 = "SHA256",
	SHA512 = "SHA512",
	MD5 = "MD5",
}
declare enum VnpCurrCode {
	VND = "VND",
}
declare enum VnpLocale {
	VN = "vn",
	EN = "en",
}
declare enum VnpCardType {
	ATM = "ATM",
	QRCODE = "QRCODE",
}
declare enum VnpTransactionType {
	PAYMENT = "01",
	FULL_REFUND = "02",
	PARTIAL_REFUND = "03",
}
declare enum RefundTransactionType {
	FULL_REFUND = "02",
	PARTIAL_REFUND = "03",
}

type VNPayConfig = {
	/**
	 * Mã tmn của đối tác
	 * @en Merchant tmn code
	 */
	tmnCode: string;
	/**
	 * Mật khẩu bảo mật của đối tác
	 * @en Secure secret of merchant
	 */
	secureSecret: string;
	/**
	 * Phiên bản của API VNPay
	 * @en Version of VNPay API
	 */
	vnp_Version?: string;
	/**
	 * Đơn vị tiền tệ
	 * @en Currency code
	 */
	vnp_CurrCode?: VnpCurrCode;
	/**
	 * Ngôn ngữ hiển thị trên cổng thanh toán
	 * @en Language display on payment gateway
	 */
	vnp_Locale?: VnpLocale;
	/**
	 * Đường dẫn tới Host API của VNPay
	 * @en API host url of VNPay
	 * @default 'https://sandbox.vnpayment.vn'
	 * @example 'https://sandbox.vnpayment.vn'
	 */
	vnpayHost?: string;
	/**
	 * Payment endpoint API của VNPay
	 * @en  Payment endpoint of VNPay
	 * @default 'paymentv2/vpcpay.html'
	 * @example 'paymentv2/vpcpay.html'
	 */
	paymentEndpoint?: string;
	/**
	 * Khi được bật, chế độ test sẽ tự động ghi đè `vnpayHost` thành sandbox
	 * @en When using test mode, `vnpayHost` should be set to sandbox
	 * @default false
	 */
	testMode?: boolean;
	/**
	 * Thuật toán mã hóa
	 *
	 * @en Hash algorithm
	 * @default 'SHA512'
	 */
	hashAlgorithm?: HashAlgorithm;
	/**
	 * Bật chức năng logging
	 *
	 *
	 * Disable it, then no logger will be used in any method
	 *
	 * @en Enable logging feature
	 * @default false
	 */
	enableLog?: boolean;
	/**
	 * Phương thức cho phép bạn tự tùy chỉnh log
	 *
	 * - data có thể thay đổi theo từng method khác nhau
	 *
	 * @en Method that allows you to customize the log
	 * @param data Data to log, it can be change to each method
	 * @returns
	 */
	loggerFn?: (data: unknown) => void;
};

type GlobalConfig = Omit<VNPayConfig, "testMode" | "enableLog" | "loggerFn"> & {
	vnpayHost: string;
	vnp_Locale: VnpLocale;
	vnp_CurrCode: VnpCurrCode;
	vnp_Command: string;
	vnp_OrderType: ProductCode | string;
	vnp_Version: string;
};
type DefaultConfig = Pick<
	GlobalConfig,
	"vnp_Version" | "vnp_CurrCode" | "vnp_Command" | "vnp_OrderType"
> & {
	vnp_TmnCode: string;
	vnp_Locale: VnpLocale;
};
type ResultVerified = {
	/**
	 * Trạng thái giao dịch
	 *
	 * @en Transaction status
	 * @example true
	 */
	isSuccess: boolean;
	/**
	 * Trạng thái xác nhận tính đúng đắn, toàn vẹn khi nhận dữ liệu từ VNPay
	 *
	 * @en Verification status, true when data from VNPay is correct and verified
	 * @example true
	 */
	isVerified: boolean;
	/**
	 * Tin nhắn thông báo
	 *
	 * @en Error message
	 * @example 'Giao dịch thành công'
	 */
	message: string;
};

/**
 * Type representing a logger function.
 * @template T - The type of data the logger function accepts.
 */
type LoggerFn<T> = (data: T) => void;
/**
 * Type representing logger data.
 * @template T - The type of the data object.
 */
type LoggerData<T extends object> = T & {
	/**
	 * The method used for logging.
	 */
	method: string;
};
/**
 * Type representing logger options.
 * @template T - The type of the data object.
 * @template Fields - The keys of the data object.
 */
type LoggerOptions<T, Fields extends keyof T> = {
	/**
	 * The logger configuration, which can be one of three types:
	 * - 'all': log all fields, optionally using a custom logger function.
	 * - 'omit': omit certain fields from logging, optionally using a custom logger function.
	 * - 'pick': log only certain fields, optionally using a custom logger function.
	 */
	logger:
		| {
				type?: "all";
				/**
				 * An optional custom logger function for logging all fields.
				 */
				loggerFn?: LoggerFn<T>;
		  }
		| {
				type: "omit";
				fields: Fields[];
				/**
				 * An optional custom logger function for logging all fields except those specified.
				 */
				loggerFn?: LoggerFn<Omit<T, Fields>>;
		  }
		| {
				type: "pick";
				fields: Fields[];
				/**
				 * An optional custom logger function for logging only the specified fields.
				 */
				loggerFn?: LoggerFn<Pick<T, Fields>>;
		  };
};

type BuildPaymentUrl = {
	/**
	 * Số tiền thanh toán. Đã tự động tính toán theo đơn vị của VNPay. (100 lần số tiền của đơn hàng trong cơ sở dữ liệu của bạn)
	 * @en Amount of payment. Automatically calculated according to the unit of VNPay. (100 times the amount of the order in your database)
	 */
	vnp_Amount: number;
	/**
	 * Thông tin mô tả nội dung thanh toán (Tiếng Việt, không dấu).
	 * @en Description of payment (Vietnamese, no accent)
	 * @example Thanh toan don hang 12345
	 */
	vnp_OrderInfo: string;
	/**
	 * Mã tham chiếu của giao dịch tại hệ thống của merchant.
	 * Mã này là duy nhất dùng để phân biệt các đơn hàng gửi sang VNPAY.
	 * Không được trùng lặp trong ngày.
	 * @en Reference code of transaction on merchant system. This code is unique to distinguish orders sent to VNPAY. Not duplicated in a day.
	 * @example 123456
	 */
	vnp_TxnRef: string;
	/**
	 * Địa chỉ IP của khách hàng thực hiện giao dịch
	 * @en IP address of customer who make transaction
	 * @example 13.160.92.202
	 */
	vnp_IpAddr: string;
	/**
	 * URL thông báo kết quả giao dịch khi Khách hàng kết thúc thanh toán.
	 * @en URL to notify result of transaction when customer finish payment
	 * @example https://domain.vn/VnPayReturn
	 */
	vnp_ReturnUrl: string;
	/**
	 * Là thời gian phát sinh giao dịch, định dạng yyyyMMddHHmmss(Time zone GMT+7)
	 *
	 * Nếu `vnp_CreateDate` truyền vào không đúng định dạng, sẽ tự động lấy thời gian hiện tại
	 *
	 * @en Transaction date format yyyyMMddHHmmss(Time zone GMT+7)
	 *
	 * If `vnp_CreateDate` is not in the correct format, it will be the current time
	 * @example 20170829103111
	 * @example
	 * ```ts
	 *  import { dateFormat } from 'vnpay';
	 *
	 *  // then
	 *  vnp_CreateDate: dateFormat(new Date()),
	 * ```
	 */
	vnp_CreateDate?: number;
	/**
	 * Thời gian hết hạn thanh toán, định dạng yyyyMMddHHmmss(Time zone GMT+7)
	 *
	 * @en Time of expiration of payment, format yyyyMMddHHmmss(Time zone GMT+7)
	 * @example 20170829103111
	 * @example
	 * ```ts
	 *  import { dateFormat } from 'vnpay';
	 *
	 *  const tomorrow = new Date();
	 *  tomorrow.setDate(tomorrow.getDate() + 1);
	 *
	 *  // then
	 *  vnp_CreateDate: dateFormat(tomorrow),
	 * ```
	 */
	vnp_ExpireDate?: number;
	/**
	 * Đơn vị tiền tệ sử dụng thanh toán. Hiện tại chỉ hỗ trợ VND
	 * @en Currency code using for payment. Currently only support VND
	 * @example VND
	 */
	vnp_CurrCode?: GlobalConfig["vnp_CurrCode"];
	/**
	 * Ngôn ngữ giao diện hiển thị. Hiện tại hỗ trợ Tiếng Việt (vn), Tiếng Anh (en)
	 * @en Language display on payment gateway. Currently support Vietnamese (vn), English (en)
	 * @example vn
	 */
	vnp_Locale?: GlobalConfig["vnp_Locale"];
	/**
	 * Loại đơn hàng/ Mã sản phẩm
	 * @en Order type/ Product Code
	 * @default 'other'
	 * @enum {ProductCode} - [ProductCode]
	 */
	vnp_OrderType?: GlobalConfig["vnp_OrderType"];
	/**
	 * Mã Ngân hàng thanh toán
	 * @en Bank code
	 * @example NCB
	 */
	vnp_BankCode?: string;
};
type BuildPaymentUrlLogger = LoggerData<
	{
		createdAt: Date;
		paymentUrl: string;
	} & DefaultConfig &
		BuildPaymentUrl
>;
type BuildPaymentUrlOptions<Fields extends keyof BuildPaymentUrlLogger> = {
	withHash?: boolean;
} & LoggerOptions<BuildPaymentUrlLogger, Fields>;

type ReturnQueryFromVNPay = Pick<
	BuildPaymentUrl,
	"vnp_OrderInfo" | "vnp_TxnRef"
> & {
	/**
	 * Số tiền thanh toán
	 * @en Payment amount
	 */
	vnp_Amount: number | string;
	/**
	 * Mã tmn của đối tác
	 * @en Merchant tmn code
	 */
	vnp_TmnCode?: string;
	/**
	 * Mã Ngân hàng thanh toán
	 * @en Bank code
	 * @example NCB
	 */
	vnp_BankCode?: string;
	/**
	 * Mã giao dịch tại Ngân hàng
	 * @en Transaction code at bank
	 * @example NCB20170829152730
	 */
	vnp_BankTranNo?: string;
	/**
	 * Loại tài khoản/thẻ khách hàng sử dụng:`ATM`,`QRCODE`
	 * @en Type of customer account/card used: `ATM`, `QRCODE`
	 * @example ATM
	 */
	vnp_CardType?: VnpCardType | string;
	/**
	 * Thời gian thanh toán. Định dạng: yyyyMMddHHmmss
	 * @en Payment time. Format: yyyyMMddHHmmss
	 * @example 20170829152730
	 */
	vnp_PayDate?: number | string;
	/**
	 * Mã giao dịch ghi nhận tại hệ thống VNPAY.
	 * @en Transaction code recorded in VNPAY system.
	 * @example 20170829153052
	 */
	vnp_TransactionNo?: number | string;
	/**
	 * Mã phản hồi kết quả thanh toán. Quy định mã trả lời 00 ứng với kết quả Thành công cho tất cả các API.
	 * @en Response code of payment result. The response code 00 corresponds to the Successful result for all APIs.
	 * @example 00
	 * @see https://sandbox.vnpayment.vn/apis/docs/bang-ma-loi/
	 */
	vnp_ResponseCode: number | string;
	/**
	 * Mã phản hồi kết quả thanh toán. Tình trạng của giao dịch tại Cổng thanh toán VNPAY.
	 *
	 * -00: Giao dịch thanh toán được thực hiện thành công tại VNPAY
	 *
	 * -Khác 00: Giao dịch không thành công tại VNPAY
	 *
	 * @en Response code of payment result. Status of transaction at VNPAY payment gateway.
	 *
	 * -00: Payment transaction is successful at VNPAY
	 *
	 * -Other 00: Payment transaction is not successful at VNPAY
	 *
	 * @example 00
	 * @see https://sandbox.vnpayment.vn/apis/docs/bang-ma-loi/
	 */
	vnp_TransactionStatus?: number | string;
	/**
	 * Mã kiểu bảo mật sử dụng để tạo mã checksum. Mã này phụ thuộc vào cấu hình của merchant và phiên bản api sử dụng.
	 * Phiên bản hiện tại hỗ trợ `SHA256`, `HMACSHA512`.
	 *
	 * @en Security type code used to create checksum code. This code depends on the configuration of the merchant and the version of the api used.
	 * The current version supports `SHA256`, `HMACSHA512`.
	 * @example HMACSHA512
	 */
	vnp_SecureHashType?: string;
	/**
	 * Mã kiểm tra (checksum) để đảm bảo dữ liệu của giao dịch không bị thay đổi trong quá trình chuyển từ merchant sang VNPAY.
	 * Việc tạo ra mã này phụ thuộc vào cấu hình của merchant và phiên bản api sử dụng. Phiên bản hiện tại hỗ trợ `SHA256`, `HMACSHA512`.
	 *
	 * @en Checksum to ensure that the transaction data is not changed during the transfer from merchant to VNPAY.
	 * The creation of this code depends on the configuration of the merchant and the version of the api used. The current version supports `SHA256`, `HMACSHA512`.
	 *
	 */
	vnp_SecureHash?: string;
};

type QueryDr = Required<
	Pick<BuildPaymentUrl, "vnp_TxnRef" | "vnp_OrderInfo" | "vnp_CreateDate"> &
		Pick<ReturnQueryFromVNPay, "vnp_TxnRef">
> & {
	/**
	 * Mã hệ thống merchant tự sinh ứng với mỗi yêu cầu truy vấn giao dịch.
	 * Mã này là duy nhất dùng để phân biệt các yêu cầu truy vấn giao dịch. Không được trùng lặp trong ngày.
	 * @en Merchant system code automatically generated for each transaction query request.
	 * This code is unique to distinguish transaction query requests. Not duplicated in a day.
	 *
	 */
	vnp_RequestId: string;
	/**
	 * Thời gian ghi nhận giao dịch tại hệ thống của merchant tính theo GMT+7, định dạng: yyyyMMddHHmmss, tham khảo giá trị:
	 * - Thanh toán PAY giống vnp_CreateDate của vnp_Command=pay
	 * - Thanh toán bằng mã Token giống "vnp_create_date" của "vnp_Command=pay_and_create" và "vnp_command=token_pay"
	 *
	 * @en Transaction time recorded at merchant system according to GMT + 7, format: yyyyMMddHHmmss, refer to value:
	 * - PAY payment same as vnp_CreateDate of vnp_Command = pay
	 * - Payment by Token code same as "vnp_create_date" of "vnp_Command = pay_and_create" and "vnp_command = token_pay"
	 */
	vnp_TransactionDate: number;
	/**
	 * 	Địa chỉ IP của máy chủ thực hiện gọi API
	 * @en IP address of the server that calls the API
	 */
	vnp_IpAddr: string;
	/**
	 * Mã giao dịch ghi nhận tại hệ thống VNPAY.
	 * @en Transaction code recorded in VNPAY system.
	 * @example 20170829153052
	 */
	vnp_TransactionNo: number;
};
type QueryDrResponseFromVNPay = Pick<
	BuildPaymentUrl,
	"vnp_TxnRef" | "vnp_Amount"
> & {
	/**
	 * Mã phản hồi kết quả xử lý của API.
	 * Quy định mã trả lời 00 ứng với yêu cầu được thực hiện thành công.
	 * Tham khảo thêm tại bảng mã lỗi.
	 *
	 * @en
	 * Response code of API
	 * If the API is executed successfully, the value of the response code is 00.
	 * To learn more about the response code, refer to the table below.
	 */
	vnp_ResponseCode: string | number;
	/**
	 * Loại giao dịch tại hệ thống VNPAY
	 */
	vnp_Command: string;
	/**
	 * Thời gian thực hiện
	 */
	vnp_PayDate: string | number;
	/**
	 * Mô tả thông tin yêu cầu
	 *
	 * @en Description of request
	 */
	vnp_OrderInfo: string;
	/**
	 * Tình trạng thanh toán của giao dịch tại Cổng thanh toán VNPAY.
	 *
	 * @en Status of transaction payment at VNPAY payment gateway.
	 */
	vnp_TransactionStatus: string | number;
	vnp_SecureHash: string;
	/**
	 * Mã Ngân hàng hoặc mã Ví điện tử thanh toán
	 * @en Bank code or account number
	 * @example NCB
	 */
	vnp_BankCode: string;
	/**
	 * Mã hệ thống VNPAY tự sinh ứng với mỗi yêu cầu truy vấn giao dịch.
	 * Mã này là duy nhất dùng để phân biệt các yêu cầu truy vấn giao dịch. Không trùng lặp trong ngày.
	 * @en VNPAY system code automatically generated for each transaction query request.
	 * This code is unique to distinguish transaction query requests. Not duplicated in a day.
	 */
	vnp_ResponseId: string;
	/**
	 * Mô tả thông tin tương ứng với vnp_ResponseCode
	 * @en Description of information corresponding to vnp_ResponseCode
	 */
	vnp_Message: string;
	/**
	 * Loại giao dịch tại hệ thống VNPAY:
	 * - 01: GD thanh toán
	 * - 02: Giao dịch hoàn trả toàn phần
	 * - 03: Giao dịch hoàn trả một phần
	 */
	vnp_TransactionType: VnpTransactionType;
	/**
	 * 	Mã khuyến mại. Trong trường hợp khách hàng áp dụng mã QR khuyến mãi khi thanh toán.
	 * @en Promotion code. In case customers apply QR promotion code when paying.
	 */
	vnp_PromotionCode?: string;
	/**
	 * Số tiền khuyến mại. Trong trường hợp khách hàng áp dụng mã QR khuyến mãi khi thanh toán.
	 * @en Promotion amount. In case customers apply QR promotion code when paying.
	 */
	vnp_PromotionAmount?: number;
	vnp_TransactionNo?: number | string;
};
type QueryDrResponse = QueryDrResponseFromVNPay & ResultVerified;
type QueryDrResponseLogger = LoggerData<
	{
		createdAt: Date;
	} & QueryDrResponse
>;
type QueryDrResponseOptions<Fields extends keyof QueryDrResponseLogger> = {
	withHash?: boolean;
} & LoggerOptions<QueryDrResponseLogger, Fields>;

type Refund = Partial<Pick<QueryDr, "vnp_TransactionNo">> &
	Pick<QueryDr, "vnp_RequestId" | "vnp_TransactionDate" | "vnp_IpAddr"> &
	Pick<BuildPaymentUrl, "vnp_Amount" | "vnp_OrderInfo" | "vnp_TxnRef"> &
	Partial<Pick<BuildPaymentUrl, "vnp_Locale">> & {
		/**
		 * Loại giao dịch tại hệ thống VNPAY:
		 * - `02`: Giao dịch hoàn trả toàn phần
		 * - `03`: Giao dịch hoàn trả một phần
		 *
		 * @en:
		 * Type of transaction at the VNPAY system:
		 * - `02`: Full refund
		 * - `03`: Partial refund
		 */
		vnp_TransactionType: RefundTransactionType | string;
		/**
		 * Người khởi tạo hoàn tiền. Có thể là tên user thực hiện hoàn tiền của merchant.
		 *
		 * @en
		 * The name of user who create the refund transaction of merchant.
		 */
		vnp_CreateBy: string;
		/**
		 * Thời gian phát sinh yêu cầu hoàn tiền (GMT +7)
		 *
		 * @en Time of refund request (GMT +7)
		 */
		vnp_CreateDate: number;
	};
type RefundResponseFromVNPay = Pick<
	QueryDrResponseFromVNPay,
	| "vnp_TxnRef"
	| "vnp_Amount"
	| "vnp_ResponseCode"
	| "vnp_Message"
	| "vnp_BankCode"
	| "vnp_PayDate"
	| "vnp_TransactionNo"
	| "vnp_TransactionType"
	| "vnp_TransactionStatus"
	| "vnp_SecureHash"
> & {
	/**
	 * Mã hệ thống VNPAY tự sinh ứng với mỗi yêu cầu hoàn trả giao dịch.
	 * Mã này là duy nhất dùng để phân biệt các yêu cầu hoàn trả giao dịch.
	 * Không được trùng lặp trong ngày
	 *
	 * @en VNPAY system code automatically generated for each refund transaction request.
	 * The system code is unique for each refund transaction request.
	 * Not duplicated in a day.
	 */
	vnp_ResponseId: string;
	/**
	 * Mã API sử dụng, mã cho giao dịch thanh toán là "refund"
	 *
	 * @en API code used for payment, the transaction code is "refund"
	 */
	vnp_Command: string;
	/**
	 * Mã hệ thống VNPAY
	 */
	vnp_TmnCode: string;
	/**
	 * Nội dung của yêu cầu hoàn tiền
	 *
	 * @en Content of the refund request
	 */
	vnp_OrderInfo: string;
};
type RefundResponse = ResultVerified & RefundResponseFromVNPay;
type RefundResponseLogger = LoggerData<
	{
		createdAt: Date;
	} & RefundResponse
>;
type RefundOptions<Fields extends keyof RefundResponseLogger> = LoggerOptions<
	RefundResponseLogger,
	Fields
>;

type VerifyReturnUrl = {
	/**
	 * Trạng thái giao dịch
	 * @en Transaction status
	 * @example true
	 */
	isSuccess: boolean;
	/**
	 * Trạng thái xác nhận tính đúng đắn, toàn vẹn khi nhận dữ liệu từ VNPay
	 *
	 * @en Verification status, true when data from VNPay is correct and verified
	 * @example true
	 */
	isVerified: boolean;
	/**
	 * Thông báo lỗi
	 * @en Error message
	 * @example 'Giao dịch thành công'
	 */
	message: string;
} & ReturnQueryFromVNPay;
type VerifyReturnUrlLogger = LoggerData<
	{
		createdAt: Date;
	} & VerifyReturnUrl
>;
type VerifyReturnUrlOptions<Fields extends keyof VerifyReturnUrlLogger> = {
	withHash?: boolean;
} & LoggerOptions<VerifyReturnUrlLogger, Fields>;

type VerifyIpnCall = VerifyReturnUrl;
type VerifyIpnCallLogger = LoggerData<
	{
		createdAt: Date;
	} & VerifyIpnCall
>;
type VerifyIpnCallOptions<Fields extends keyof VerifyIpnCallLogger> = {
	withHash?: boolean;
} & LoggerOptions<VerifyIpnCallLogger, Fields>;

type Bank = {
	/**
	 * Mã ngân hàng
	 *
	 * @en Bank code
	 */
	bank_code: string;
	/**
	 * Tên ngân hàng
	 *
	 * @en Bank name
	 */
	bank_name: string;
	/**
	 * Đường dẫn logo của ngân hàng
	 *
	 * @en Logo link
	 */
	logo_link: string;
	bank_type: number;
	display_order: number;
};

/**
 * Lớp hỗ trợ thanh toán qua VNPay
 * @en VNPay class to support VNPay payment
 * @see https://sandbox.vnpayment.vn/apis/docs/thanh-toan-pay/pay.html
 *
 * @example
 * import { VNPay } from 'vnpay';
 *
 * const vnpay = new VNPay({
 *     api_Host: 'https://sandbox.vnpayment.vn',
 *     tmnCode: 'TMNCODE',
 *     secureSecret: 'SERCRET',
 *     testMode: true, // optional
 *     hashAlgorithm: 'SHA512', // optional
 *     paymentEndpoint: 'paymentv2/vpcpay.html', // optional
 * });
 *
 * const tnx = '12345678'; // Generate your own transaction code
 * const urlString = vnpay.buildPaymentUrl({
 *     vnp_Amount: 100000,
 *      vnp_IpAddr: '192.168.0.1',
 *      vnp_ReturnUrl: 'http://localhost:8888/order/vnpay_return',
 *      vnp_TxnRef: tnx,
 *      vnp_OrderInfo: `Thanh toan cho ma GD: ${tnx}`,
 * }),
 *
 */
declare class VNPay {
	private globalDefaultConfig;
	private HASH_ALGORITHM;
	private BUFFER_ENCODE;
	private isEnableLog;
	private readonly globalLoggerFn;
	constructor({
		vnpayHost,
		vnp_Version,
		vnp_CurrCode,
		vnp_Locale,
		testMode,
		paymentEndpoint,
		...config
	}: VNPayConfig);
	/**
	 * Lấy cấu hình mặc định của VNPay
	 * @en Get default config of VNPay
	 */
	get defaultConfig(): DefaultConfig;
	/**
	 *
	 * @returns {Promise<Bank[]>} List of banks
	 */
	getBankList(): Promise<Bank[]>;
	/**
	 * Phương thức xây dựng, tạo thành url thanh toán của VNPay
	 * @en Build the payment url
	 *
	 * @param {BuildPaymentUrl} data - Payload that contains the information to build the payment url
	 * @returns {string} The payment url string
	 * @see https://sandbox.vnpayment.vn/apis/docs/thanh-toan-pay/pay.html#tao-url-thanh-toan
	 */
	buildPaymentUrl<LoggerFields extends keyof BuildPaymentUrlLogger>(
		data: BuildPaymentUrl,
		options?: BuildPaymentUrlOptions<LoggerFields>,
	): string;
	/**
	 * Phương thức xác thực tính đúng đắn của các tham số trả về từ VNPay
	 * @en Method to verify the return url from VNPay
	 *
	 * @param {ReturnQueryFromVNPay} query - The object of data return from VNPay
	 * @returns {VerifyReturnUrl} The return object
	 * @see https://sandbox.vnpayment.vn/apis/docs/thanh-toan-pay/pay.html#code-returnurl
	 */
	verifyReturnUrl<LoggerFields extends keyof VerifyReturnUrlLogger>(
		query: ReturnQueryFromVNPay,
		options?: VerifyReturnUrlOptions<LoggerFields>,
	): VerifyReturnUrl;
	/**
	 * Phương thức xác thực tính đúng đắn của lời gọi ipn từ VNPay
	 *
	 * Sau khi nhận được lời gọi, hệ thống merchant cần xác thực dữ liệu nhận được từ VNPay, kiểm tra đơn hàng có hợp lệ không, kiểm tra số tiền thanh toán có đúng không.
	 *
	 * Sau đó phản hồi lại VNPay kết quả xác thực thông qua các `IpnResponse`
	 *
	 * @en Method to verify the ipn url from VNPay
	 *
	 * After receiving the call, the merchant system needs to verify the data received from VNPay, check if the order is valid, check if the payment amount is correct.
	 *
	 * Then respond to VNPay the verification result through the `IpnResponse`
	 *
	 * @param {ReturnQueryFromVNPay} query The object of data return from VNPay
	 * @returns {VerifyIpnCall} The return object
	 * @see https://sandbox.vnpayment.vn/apis/docs/thanh-toan-pay/pay.html#code-ipn-url
	 */
	verifyIpnCall<LoggerFields extends keyof VerifyIpnCallLogger>(
		query: ReturnQueryFromVNPay,
		options?: VerifyIpnCallOptions<LoggerFields>,
	): VerifyIpnCall;
	/**
	 * Đây là API để hệ thống merchant truy vấn kết quả thanh toán của giao dịch tại hệ thống VNPAY.
	 *
	 * @en This is the API for the merchant system to query the payment result of the transaction at the VNPAY system.
	 *
	 * @param {QueryDr} query - The data to query payment result
	 * @returns {Promise<QueryDrResponse>} The data return from VNPay and after verified
	 * @see https://sandbox.vnpayment.vn/apis/docs/truy-van-hoan-tien/querydr&refund.html#truy-van-ket-qua-thanh-toan-PAY
	 */
	queryDr<LoggerFields extends keyof QueryDrResponseLogger>(
		query: QueryDr,
		options?: QueryDrResponseOptions<LoggerFields>,
	): Promise<QueryDrResponse>;
	/**
	 * Đây là API để hệ thống merchant gửi yêu cầu hoàn tiền cho giao dịch qua hệ thống Cổng thanh toán VNPAY.
	 *
	 * @en This is the API for the merchant system to refund the transaction at the VNPAY system.
	 * @param {Refund} data - The data to request refund
	 * @returns The data return from VNPay
	 * @see https://sandbox.vnpayment.vn/apis/docs/truy-van-hoan-tien/querydr&refund.html#hoan-tien-thanh-toan-PAY
	 */
	refund<LoggerFields extends keyof RefundResponseLogger>(
		data: Refund,
		options?: RefundOptions<LoggerFields>,
	): Promise<RefundResponse>;
	private logData;
}

declare const WRONG_CHECKSUM_KEY = "WRONG_CHECKSUM_KEY";
declare const RESPONSE_MAP: Map<string, Record<VnpLocale, string>>;
declare const QUERY_DR_RESPONSE_MAP: Map<string, Record<VnpLocale, string>>;
declare const REFUND_RESPONSE_MAP: Map<string, Record<VnpLocale, string>>;
declare const TRANSACTION_STATUS_RESPONSE_MAP: Map<
	string,
	Record<VnpLocale, string>
>;

declare const VNPAY_GATEWAY_SANDBOX_HOST = "https://sandbox.vnpayment.vn";
declare const PAYMENT_ENDPOINT = "paymentv2/vpcpay.html";
declare const QUERY_DR_REFUND_ENDPOINT = "merchant_webapi/api/transaction";
declare const GET_BANK_LIST_ENDPOINT = "qrpayauth/api/merchant/get_bank_list";

/**
 * The response must to be sent to VNPAY after receiving the IPN request
 */
type IpnResponse = {
	RspCode: string;
	Message: string;
};
declare const IpnSuccess: IpnResponse;
declare const IpnOrderNotFound: IpnResponse;
declare const InpOrderAlreadyConfirmed: IpnResponse;
declare const IpnIpProhibited: IpnResponse;
declare const IpnInvalidAmount: IpnResponse;
declare const IpnFailChecksum: IpnResponse;
declare const IpnUnknownError: IpnResponse;

declare const numberRegex: RegExp;

declare const VNP_VERSION = "2.1.0";
declare const VNP_DEFAULT_COMMAND = "pay";
declare const CURR_CODE_VND = "VND";

declare function getDateInGMT7(date?: Date): Date;
/**
 * Định dạng lại ngày theo định dạng của VNPay, mặc định là yyyyMMddHHmmss
 * @en Format date to VNPay format, default is yyyyMMddHHmmss
 *
 * @param date date to format
 * @param format format of date
 * @returns formatted date
 */
declare function dateFormat(date: Date, format?: string): number;
/**
 * Parse a vnpay date format number to date
 * @param dateNumber An vnpay date format number
 * @returns Date
 */
declare function parseDate(
	dateNumber: number | string,
	tz?: "utc" | "local" | "gmt7",
): Date;
/**
 * Validate if the date is match with format `yyyyMMddHHmmss` or not
 * @param date The date to be validated
 * @returns True if the date is valid, false otherwise
 */
declare function isValidVnpayDateFormat(date: number): boolean;
declare function generateRandomString(
	length: number,
	options?: {
		onlyNumber?: boolean;
	},
): string;
/**
 * Lấy thông tin response theo mã response
 * @en Get response message by response code
 *
 * @param responseCode response code from VNPay
 * @param locale locale of response text
 * @param responseMap map of response code and response text if you want to custom
 * @returns message of response code
 */
declare function getResponseByStatusCode(
	responseCode?: string,
	locale?: VnpLocale,
	responseMap?: Map<string, Record<VnpLocale, string>>,
): string;
declare function resolveUrlString(host: string, path: string): string;
declare function hash(
	secret: string,
	data: BinaryLike | string | Buffer,
	algorithm: HashAlgorithm,
): string;

/**
 * Truyền vào `loggerFn` để bỏ qua logger
 *
 * @en Pass to `loggerFn` for ignoring logger
 * @returns {void}
 */
declare function ignoreLogger(): void;
/**
 * Ghi dữ liệu ra console
 *
 * @en Log data to console
 * @param data - Data to be logged
 */
declare function consoleLogger(data: unknown, symbol?: keyof Console): void;
/**
 * Ghi dữ liệu ra file
 *
 * @en Log data to file
 * @param data Data to be logged
 * @param filePath File path to be written
 * @param errorCallback Error callback function
 */
declare function fileLogger(
	data: unknown,
	filePath: string,
	errorCallback?: unknown,
): void;

declare function buildPaymentUrlSearchParams(
	data: Record<string, unknown>,
): URLSearchParams;
declare function createPaymentUrl({
	config,
	data,
}: {
	config: Pick<GlobalConfig, "vnpayHost" | "paymentEndpoint">;
	data: (BuildPaymentUrl & DefaultConfig) | Record<string, unknown>;
}): URL;
declare function calculateSecureHash({
	bufferEncode,
	data,
	hashAlgorithm,
	secureSecret,
}: {
	secureSecret: string;
	data: string;
	hashAlgorithm: HashAlgorithm;
	bufferEncode?: BufferEncoding;
}): string;
declare function verifySecureHash({
	data,
	hashAlgorithm,
	receivedHash,
	secureSecret,
}: {
	secureSecret: string;
	data: string;
	hashAlgorithm: HashAlgorithm;
	receivedHash: string;
}): boolean;

export {
	type Bank,
	type BuildPaymentUrl,
	type BuildPaymentUrlLogger,
	type BuildPaymentUrlOptions,
	CURR_CODE_VND,
	type DefaultConfig,
	GET_BANK_LIST_ENDPOINT,
	type GlobalConfig,
	HashAlgorithm,
	InpOrderAlreadyConfirmed,
	IpnFailChecksum,
	IpnInvalidAmount,
	IpnIpProhibited,
	IpnOrderNotFound,
	type IpnResponse,
	IpnSuccess,
	IpnUnknownError,
	type LoggerData,
	type LoggerOptions,
	PAYMENT_ENDPOINT,
	ProductCode,
	QUERY_DR_REFUND_ENDPOINT,
	QUERY_DR_RESPONSE_MAP,
	type QueryDr,
	type QueryDrResponse,
	type QueryDrResponseFromVNPay,
	REFUND_RESPONSE_MAP,
	RESPONSE_MAP,
	type Refund,
	type RefundResponse,
	type RefundResponseFromVNPay,
	RefundTransactionType,
	type ResultVerified,
	type ReturnQueryFromVNPay,
	TRANSACTION_STATUS_RESPONSE_MAP,
	UrlService,
	VNPAY_GATEWAY_SANDBOX_HOST,
	VNP_DEFAULT_COMMAND,
	VNP_VERSION,
	VNPay,
	type VNPayConfig,
	type VerifyIpnCall,
	type VerifyIpnCallLogger,
	type VerifyIpnCallOptions,
	type VerifyReturnUrl,
	type VerifyReturnUrlLogger,
	type VerifyReturnUrlOptions,
	VnpCardType,
	VnpCurrCode,
	VnpLocale,
	VnpTransactionType,
	WRONG_CHECKSUM_KEY,
	buildPaymentUrlSearchParams,
	calculateSecureHash,
	consoleLogger,
	createPaymentUrl,
	dateFormat,
	fileLogger,
	generateRandomString,
	getDateInGMT7,
	getResponseByStatusCode,
	hash,
	ignoreLogger,
	isValidVnpayDateFormat,
	numberRegex,
	parseDate,
	resolveUrlString,
	verifySecureHash,
};
