{"version":3,"sources":["../src/constants/response-map.constant.ts","../src/constants/api-endpoint.constant.ts","../src/constants/ipn-result-for-vnpay.constant.ts","../src/constants/regex.constant.ts","../src/constants/index.ts","../src/enums/product-code.enum.ts","../src/enums/index.ts","../src/utils/common.ts","../src/utils/logger.ts","../src/utils/payment.util.ts","../src/vnpay.ts"],"names":["WRONG_CHECKSUM_KEY","RESPONSE_MAP","QUERY_DR_RESPONSE_MAP","REFUND_RESPONSE_MAP","TRANSACTION_STATUS_RESPONSE_MAP","VNPAY_GATEWAY_SANDBOX_HOST","PAYMENT_ENDPOINT","QUERY_DR_REFUND_ENDPOINT","GET_BANK_LIST_ENDPOINT","IpnSuccess","IpnOrderNotFound","InpOrderAlreadyConfirmed","IpnIpProhibited","IpnInvalidAmount","IpnFailChecksum","IpnUnknownError","numberRegex","VNP_VERSION","VNP_DEFAULT_COMMAND","CURR_CODE_VND","ProductCode","UrlService","HashAlgorithm","VnpCurrCode","VnpLocale","VnpCardType","VnpTransactionType","RefundTransactionType","getDateInGMT7","date","tz","dateFormat","format","pad","n","year","month","day","hour","minute","second","parseDate","dateNumber","dateString","_parseInt","utc","isValidVnpayDateFormat","generateRandomString","length","options","result","characters","charactersLength","i","getResponseByStatusCode","responseCode","locale","responseMap","resolveUrlString","host","path","trimmedHost","trimmedPath","hash","secret","data","algorithm","crypto","ignoreLogger","consoleLogger","symbol","fileLogger","filePath","errorCallback","dataString","err","buildPaymentUrlSearchParams","searchParams","sortedEntries","key1","key2","key","value","createPaymentUrl","config","redirectUrl","calculateSecureHash","bufferEncode","hashAlgorithm","secureSecret","verifySecureHash","receivedHash","VNPay","vnpayHost","vnp_Version","vnp_CurrCode","vnp_Locale","testMode","paymentEndpoint","bankList","bank","dataToBuild","timeGMT7","signed","data2Log","cloneUrl","query","vnp_SecureHash","vnp_SecureHashType","cloneQuery","isVerified","outputResults","command","dataQuery","url","stringToCreateHash","requestHashed","body","response","responseData","message","stringToCreateHashOfResponse","responseHashed","vnp_Command","DEFAULT_TRANSACTION_NO_IF_NOT_EXIST","vnp_TmnCode","vnp_RequestId","vnp_TransactionType","vnp_TxnRef","vnp_TransactionNo","vnp_TransactionDate","vnp_CreateBy","vnp_CreateDate","vnp_IpAddr","vnp_OrderInfo","stringToHashOfRequest","type","fields","keyAssert"],"mappings":"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","file":"index.js","sourcesContent":["import type { VnpLocale } from '../enums';\n\nexport const WRONG_CHECKSUM_KEY = 'WRONG_CHECKSUM_KEY';\n\nexport const RESPONSE_MAP = new Map<string, Record<VnpLocale, string>>([\n    ['00', { vn: 'Giao dịch thành công', en: 'Approved' }],\n    ['01', { vn: 'Giao dịch đã tồn tại', en: 'Transaction is already exist' }],\n    [\n        '02',\n        {\n            vn: 'Merchant không hợp lệ (kiểm tra lại vnp_TmnCode)',\n            en: 'Invalid merchant (check vnp_TmnCode value)',\n        },\n    ],\n    [\n        '03',\n        {\n            vn: 'Dữ liệu gửi sang không đúng định dạng',\n            en: 'Sent data is not in the right format',\n        },\n    ],\n    [\n        '04',\n        {\n            vn: 'Khởi tạo GD không thành công do Website đang bị tạm khoá',\n            en: 'Payment website is not available',\n        },\n    ],\n    [\n        '05',\n        {\n            vn: 'Giao dịch không thành công do: Quý khách nhập sai mật khẩu thanh toán quá số lần quy định. Xin quý khách vui lòng thực hiện lại giao dịch',\n            en: 'Transaction failed: Too many wrong password input',\n        },\n    ],\n    [\n        '06',\n        {\n            vn: 'Giao dịch không thành công do Quý khách nhập sai mật khẩu xác thực giao dịch (OTP). Xin quý khách vui lòng thực hiện lại giao dịch.',\n            en: 'Transaction failed: Wrong OTP input',\n        },\n    ],\n    [\n        '07',\n        {\n            vn: 'Trừ tiền thành công. Giao dịch bị nghi ngờ (liên quan tới lừa đảo, giao dịch bất thường). Đối với giao dịch này cần merchant xác nhận thông qua merchant admin: Từ chối/Đồng ý giao dịch',\n            en: 'This transaction is suspicious',\n        },\n    ],\n    [\n        '08',\n        {\n            vn: 'Giao dịch không thành công do: Hệ thống Ngân hàng đang bảo trì. Xin quý khách tạm thời không thực hiện giao dịch bằng thẻ/tài khoản của Ngân hàng này.',\n            en: 'Transaction failed: The banking system is under maintenance. Please do not temporarily make transactions by card / account of this Bank.',\n        },\n    ],\n    [\n        '09',\n        {\n            vn: 'Giao dịch không thành công do: Thẻ/Tài khoản của khách hàng chưa đăng ký dịch vụ InternetBanking tại ngân hàng.',\n            en: 'Transaction failed: Cards / accounts of customer who has not yet registered for Internet Banking service.',\n        },\n    ],\n    [\n        '10',\n        {\n            vn: 'Giao dịch không thành công do: Khách hàng xác thực thông tin thẻ/tài khoản không đúng quá 3 lần',\n            en: 'Transaction failed: Customer incorrectly validate the card / account information more than 3 times',\n        },\n    ],\n    [\n        '11',\n        {\n            vn: 'Giao dịch không thành công do: Đã hết hạn chờ thanh toán. Xin quý khách vui lòng thực hiện lại giao dịch.',\n            en: 'Transaction failed: Pending payment is expired. Please try again.',\n        },\n    ],\n    [\n        '24',\n        {\n            vn: 'Giao dịch không thành công do: Khách hàng hủy giao dịch',\n            en: 'Transaction canceled',\n        },\n    ],\n    [\n        '51',\n        {\n            vn: 'Giao dịch không thành công do: Tài khoản của quý khách không đủ số dư để thực hiện giao dịch.',\n            en: 'Transaction failed: Your account is not enough balance to make the transaction.',\n        },\n    ],\n    [\n        '65',\n        {\n            vn: 'Giao dịch không thành công do: Tài khoản của Quý khách đã vượt quá hạn mức giao dịch trong ngày.',\n            en: 'Transaction failed: Your account has exceeded the daily limit.',\n        },\n    ],\n    [\n        '75',\n        {\n            vn: 'Ngân hàng thanh toán đang bảo trì',\n            en: 'Banking system is under maintenance',\n        },\n    ],\n    [WRONG_CHECKSUM_KEY, { vn: 'Sai checksum', en: 'Wrong checksum' }],\n    ['default', { vn: 'Giao dịch thất bại', en: 'Failure' }],\n]);\n\nexport const QUERY_DR_RESPONSE_MAP = new Map<string, Record<VnpLocale, string>>([\n    ['00', { vn: 'Yêu cầu thành công', en: 'Success' }],\n    [\n        '02',\n        {\n            vn: 'Mã định danh kết nối không hợp lệ (kiểm tra lại TmnCode)',\n            en: 'Invalid connection identifier (check TmnCode)',\n        },\n    ],\n    [\n        '03',\n        {\n            vn: 'Dữ liệu gửi sang không đúng định dạng',\n            en: 'Sent data is not in the right format',\n        },\n    ],\n    [\n        '91',\n        {\n            vn: 'Không tìm thấy giao dịch yêu cầu',\n            en: 'Transaction not found for request',\n        },\n    ],\n    [\n        '94',\n        {\n            vn: 'Yêu cầu trùng lặp, duplicate request trong thời gian giới hạn của API',\n            en: 'Duplicate request within the time limit of the API',\n        },\n    ],\n    [\n        '97',\n        {\n            vn: 'Checksum không hợp lệ',\n            en: 'Invalid checksum',\n        },\n    ],\n    [\n        '99',\n        {\n            vn: 'Các lỗi khác (lỗi còn lại, không có trong danh sách mã lỗi đã liệt kê)',\n            en: 'Other errors (remaining errors, not in the list of error codes listed)',\n        },\n    ],\n    [WRONG_CHECKSUM_KEY, { vn: 'Sai checksum', en: 'Wrong checksum' }],\n    ['default', { vn: 'Giao dịch thất bại', en: 'Failure' }],\n]);\n\nexport const REFUND_RESPONSE_MAP = new Map<string, Record<VnpLocale, string>>([\n    ['00', { vn: 'Yêu cầu thành công', en: 'Success' }],\n    [\n        '02',\n        {\n            vn: 'Mã định danh kết nối không hợp lệ (kiểm tra lại TmnCode)',\n            en: 'Invalid connection identifier (check TmnCode)',\n        },\n    ],\n    [\n        '03',\n        {\n            vn: 'Dữ liệu gửi sang không đúng định dạng',\n            en: 'Sent data is not in the right format',\n        },\n    ],\n    [\n        '91',\n        {\n            vn: 'Không tìm thấy giao dịch yêu cầu hoàn trả',\n            en: 'Transaction not found for request refund',\n        },\n    ],\n    [\n        '94',\n        {\n            vn: 'Giao dịch đã được gửi yêu cầu hoàn tiền trước đó. Yêu cầu này VNPAY đang xử lý',\n            en: 'The transaction has been sent a refund request before. VNPAY is processing this request',\n        },\n    ],\n    [\n        '95',\n        {\n            vn: 'Giao dịch này không thành công bên VNPAY. VNPAY từ chối xử lý yêu cầu',\n            en: 'This transaction is not successful from VNPAY. VNPAY refuses to process the request',\n        },\n    ],\n    [\n        '97',\n        {\n            vn: 'Checksum không hợp lệ',\n            en: 'Invalid checksum',\n        },\n    ],\n    [\n        '99',\n        {\n            vn: 'Các lỗi khác (lỗi còn lại, không có trong danh sách mã lỗi đã liệt kê)',\n            en: 'Other errors (remaining errors, not in the list of error codes listed)',\n        },\n    ],\n    [WRONG_CHECKSUM_KEY, { vn: 'Sai checksum', en: 'Wrong checksum' }],\n    ['default', { vn: 'Giao dịch thất bại', en: 'Failure' }],\n]);\n\nexport const TRANSACTION_STATUS_RESPONSE_MAP = new Map<string, Record<VnpLocale, string>>([\n    ['00', { vn: 'Giao dịch thanh toán thành công', en: 'Payment transaction successful' }],\n    ['01', { vn: 'Giao dịch chưa hoàn tất', en: 'Transaction not completed' }],\n    [\n        '02',\n        {\n            vn: 'Giao dịch bị lỗi',\n            en: 'Transaction error',\n        },\n    ],\n    [\n        '04',\n        {\n            vn: 'Giao dịch đảo (Khách hàng đã bị trừ tiền tại Ngân hàng nhưng GD chưa thành công ở VNPAY)',\n            en: 'Transaction reverse (Customer has been deducted money at the Bank but the transaction is not successful at VNPAY)',\n        },\n    ],\n    [\n        '05',\n        {\n            vn: 'VNPAY đang xử lý giao dịch này (GD hoàn tiền)',\n            en: 'VNPAY is processing this transaction (refund)',\n        },\n    ],\n    [\n        '06',\n        {\n            vn: 'VNPAY đã gửi yêu cầu hoàn tiền sang Ngân hàng (GD hoàn tiền)',\n            en: 'VNPAY has sent a refund request to the Bank (refund)',\n        },\n    ],\n    [\n        '07',\n        {\n            vn: 'Giao dịch bị nghi ngờ gian lận',\n            en: 'Transaction suspected of fraud',\n        },\n    ],\n    [\n        '09',\n        {\n            vn: 'GD Hoàn trả bị từ chối',\n            en: 'Refund transaction is rejected',\n        },\n    ],\n    [WRONG_CHECKSUM_KEY, { vn: 'Sai checksum', en: 'Wrong checksum' }],\n]);\n","export const VNPAY_GATEWAY_SANDBOX_HOST = 'https://sandbox.vnpayment.vn';\n\nexport const PAYMENT_ENDPOINT = 'paymentv2/vpcpay.html';\nexport const QUERY_DR_REFUND_ENDPOINT = 'merchant_webapi/api/transaction';\nexport const GET_BANK_LIST_ENDPOINT = 'qrpayauth/api/merchant/get_bank_list';\n","/**\n * The response must to be sent to VNPAY after receiving the IPN request\n */\nexport type IpnResponse = {\n    RspCode: string;\n    Message: string;\n};\n\nexport const IpnSuccess: IpnResponse = {\n    RspCode: '00',\n    Message: 'Confirm Success',\n};\n\nexport const IpnOrderNotFound: IpnResponse = {\n    RspCode: '01',\n    Message: 'Order not found',\n};\n\nexport const InpOrderAlreadyConfirmed: IpnResponse = {\n    RspCode: '02',\n    Message: 'Order already confirmed',\n};\n\nexport const IpnIpProhibited: IpnResponse = {\n    RspCode: '03',\n    Message: 'IP prohibited',\n};\n\nexport const IpnInvalidAmount: IpnResponse = {\n    RspCode: '04',\n    Message: 'Invalid amount',\n};\n\nexport const IpnFailChecksum: IpnResponse = {\n    RspCode: '97',\n    Message: 'Fail checksum',\n};\n\nexport const IpnUnknownError: IpnResponse = {\n    RspCode: '99',\n    Message: 'Unknown error',\n};\n","export const numberRegex = /^[0-9]+$/;\n","export * from './response-map.constant';\nexport * from './api-endpoint.constant';\nexport * from './ipn-result-for-vnpay.constant';\nexport * from './regex.constant';\n\nexport const VNP_VERSION = '2.1.0';\nexport const VNP_DEFAULT_COMMAND = 'pay';\nexport const CURR_CODE_VND = 'VND';\n","/**\n * @see https://sandbox.vnpayment.vn/apis/docs/loai-hang-hoa/\n */\nexport enum ProductCode {\n    Food_Consumption = '100000',\n    Phone_Tablet = '110000',\n    ElectricAppliance = '120000',\n    Computers_OfficeEquipment = '130000',\n    Electronics_Sound = '140000',\n    Books_Newspapers_Magazines = '150000',\n    Sports_Picnics = '160000',\n    Hotel_Tourism = '170000',\n    Cuisine = '180000',\n    Entertainment_Training = '190000',\n    Fashion = '200000',\n    Health_Beauty = '210000',\n    Mother_Baby = '220000',\n    KitchenUtensils = '230000',\n    Vehicle = '240000',\n    Pay = '250000',\n    AirlineTickets = '250007',\n    CardCode = '260000',\n    Pharmacy_MedicalServices = '270000',\n    Other = 'other',\n}\n","export * from './product-code.enum';\n\nexport enum UrlService {\n    sandbox = 'https://sandbox.vnpayment.vn/paymentv2/vpcpay.html',\n}\n\nexport enum HashAlgorithm {\n    SHA256 = 'SHA256',\n    SHA512 = 'SHA512',\n    MD5 = 'MD5',\n}\n\nexport enum VnpCurrCode {\n    VND = 'VND',\n}\n\nexport enum VnpLocale {\n    VN = 'vn',\n    EN = 'en',\n}\n\nexport enum VnpCardType {\n    ATM = 'ATM',\n    QRCODE = 'QRCODE',\n}\n\nexport enum VnpTransactionType {\n    PAYMENT = '01',\n    FULL_REFUND = '02',\n    PARTIAL_REFUND = '03',\n}\n\nexport enum RefundTransactionType {\n    FULL_REFUND = '02',\n    PARTIAL_REFUND = '03',\n}\n","import crypto, { type BinaryLike } from 'crypto';\nimport { tz, utc } from 'moment-timezone';\nimport { RESPONSE_MAP } from '../constants/response-map.constant';\nimport { type HashAlgorithm, VnpLocale } from '../enums';\n\nexport function getDateInGMT7(date?: Date): Date {\n    return new Date(\n        tz(date ?? new Date(), 'Asia/Ho_Chi_Minh').format('YYYY-MM-DDTHH:mm:ss.SSS[Z]'),\n    );\n}\n\n/**\n * Định dạng lại ngày theo định dạng của VNPay, mặc định là yyyyMMddHHmmss\n * @en Format date to VNPay format, default is yyyyMMddHHmmss\n *\n * @param date date to format\n * @param format format of date\n * @returns formatted date\n */\nexport function dateFormat(date: Date, format = 'yyyyMMddHHmmss'): number {\n    const pad = (n: number) => (n < 10 ? `0${n}` : n).toString();\n    const year = date.getFullYear();\n    const month = pad(date.getMonth() + 1);\n    const day = pad(date.getDate());\n    const hour = pad(date.getHours());\n    const minute = pad(date.getMinutes());\n    const second = pad(date.getSeconds());\n\n    return Number(\n        format\n            .replace('yyyy', year.toString())\n            .replace('MM', month)\n            .replace('dd', day)\n            .replace('HH', hour)\n            .replace('mm', minute)\n            .replace('ss', second),\n    );\n}\n\n/**\n * Parse a vnpay date format number to date\n * @param dateNumber An vnpay date format number\n * @returns Date\n */\nexport function parseDate(\n    dateNumber: number | string,\n    tz: 'utc' | 'local' | 'gmt7' = 'local',\n): Date {\n    const dateString = dateNumber.toString();\n\n    const _parseInt = Number.parseInt;\n\n    const year = _parseInt(dateString.slice(0, 4));\n    const month = _parseInt(dateString.slice(4, 6)) - 1; // months are 0-indexed in JavaScript\n    const day = _parseInt(dateString.slice(6, 8));\n    const hour = _parseInt(dateString.slice(8, 10));\n    const minute = _parseInt(dateString.slice(10, 12));\n    const second = _parseInt(dateString.slice(12, 14));\n\n    switch (tz) {\n        case 'utc':\n            return new Date(\n                utc([year, month, day, hour, minute, second], true).format(\n                    'YYYY-MM-DDTHH:mm:ss.SSS[Z]',\n                ),\n            );\n        case 'gmt7':\n            return getDateInGMT7(new Date(year, month, day, hour, minute, second));\n        // biome-ignore lint/complexity/noUselessSwitchCase: still good to readable\n        case 'local':\n        default:\n            return new Date(year, month, day, hour, minute, second);\n    }\n}\n\n/**\n * Validate if the date is match with format `yyyyMMddHHmmss` or not\n * @param date The date to be validated\n * @returns True if the date is valid, false otherwise\n */\nexport function isValidVnpayDateFormat(date: number): boolean {\n    const dateString = date.toString();\n    const regex =\n        /^\\d{4}(0[1-9]|1[0-2])(0[1-9]|[12][0-9]|3[01])([01][0-9]|2[0-3])[0-5][0-9][0-5][0-9]$/;\n    return regex.test(dateString);\n}\n\nexport function generateRandomString(\n    length: number,\n    options?: {\n        onlyNumber?: boolean;\n    },\n) {\n    let result = '';\n    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    if (options?.onlyNumber) {\n        characters = '0123456789';\n    }\n    const charactersLength = characters.length;\n    for (let i = 0; i < length; i++) {\n        result += `${characters[(Math.random() * charactersLength) | 0]}`;\n    }\n    return result;\n}\n\n/**\n * Lấy thông tin response theo mã response\n * @en Get response message by response code\n *\n * @param responseCode response code from VNPay\n * @param locale locale of response text\n * @param responseMap map of response code and response text if you want to custom\n * @returns message of response code\n */\nexport function getResponseByStatusCode(\n    responseCode = '',\n    locale: VnpLocale = VnpLocale.VN,\n    responseMap = RESPONSE_MAP,\n): string {\n    const respondText: Record<VnpLocale, string> =\n        responseMap.get(responseCode) ?? (responseMap.get('default') as Record<VnpLocale, string>);\n\n    return respondText[locale];\n}\n\nexport function resolveUrlString(host: string, path: string): string {\n    let trimmedHost = host.trim();\n    let trimmedPath = path.trim();\n\n    while (trimmedHost.endsWith('/') || trimmedHost.endsWith('\\\\')) {\n        trimmedHost = trimmedHost.slice(0, -1);\n    }\n    while (trimmedPath.startsWith('/') || trimmedPath.startsWith('\\\\')) {\n        trimmedPath = trimmedPath.slice(1);\n    }\n    return `${trimmedHost}/${trimmedPath}`;\n}\n\nexport function hash(\n    secret: string,\n    data: BinaryLike | string | Buffer,\n    algorithm: HashAlgorithm,\n): string {\n    return crypto.createHmac(algorithm, secret).update(data.toString()).digest('hex');\n}\n","import * as fs from 'fs';\n\n/**\n * Truyền vào `loggerFn` để bỏ qua logger\n *\n * @en Pass to `loggerFn` for ignoring logger\n * @returns {void}\n */\nexport function ignoreLogger(): void {}\n\n/**\n * Ghi dữ liệu ra console\n *\n * @en Log data to console\n * @param data - Data to be logged\n */\nexport function consoleLogger(data: unknown, symbol: keyof Console = 'log'): void {\n    if (typeof console[symbol] === 'function') {\n        (console[symbol] as (...data: unknown[]) => void)(data);\n    }\n}\n\n/**\n * Ghi dữ liệu ra file\n *\n * @en Log data to file\n * @param data Data to be logged\n * @param filePath File path to be written\n * @param errorCallback Error callback function\n */\nexport function fileLogger(data: unknown, filePath: string, errorCallback?: unknown): void {\n    const dataString = typeof data === 'object' ? JSON.stringify(data) : String(data);\n    fs.appendFile(filePath, `${dataString}\\n`, (err) => {\n        if (err && typeof errorCallback === 'function') {\n            return errorCallback(err);\n        }\n\n        if (err) {\n            console.error('Failed to write to file:', err);\n            throw err;\n        }\n    });\n}\n","import { PAYMENT_ENDPOINT, VNPAY_GATEWAY_SANDBOX_HOST } from '../constants';\nimport type { HashAlgorithm } from '../enums';\nimport type { BuildPaymentUrl, DefaultConfig, GlobalConfig } from '../types';\nimport { hash, resolveUrlString } from './common';\n\nexport function buildPaymentUrlSearchParams(data: Record<string, unknown>): URLSearchParams {\n    const searchParams = new URLSearchParams();\n    const sortedEntries = Object.entries(data).sort(([key1], [key2]) =>\n        key1.toString().localeCompare(key2.toString()),\n    );\n\n    for (const [key, value] of sortedEntries) {\n        // Skip empty value\n        if (value === '' || value === undefined || value === null) {\n            continue;\n        }\n\n        searchParams.append(key, value.toString());\n    }\n    return searchParams;\n}\n\nexport function createPaymentUrl({\n    config,\n    data,\n}: {\n    config: Pick<GlobalConfig, 'vnpayHost' | 'paymentEndpoint'>;\n    data: (BuildPaymentUrl & DefaultConfig) | Record<string, unknown>;\n}): URL {\n    const redirectUrl = new URL(\n        resolveUrlString(\n            config.vnpayHost ?? VNPAY_GATEWAY_SANDBOX_HOST,\n            config.paymentEndpoint ?? PAYMENT_ENDPOINT,\n        ),\n    );\n    buildPaymentUrlSearchParams(data).forEach((value, key) => {\n        redirectUrl.searchParams.set(key, value);\n    });\n    return redirectUrl;\n}\n\nexport function calculateSecureHash({\n    bufferEncode = 'utf-8',\n    data,\n    hashAlgorithm,\n    secureSecret,\n}: {\n    secureSecret: string;\n    data: string;\n    hashAlgorithm: HashAlgorithm;\n    bufferEncode?: BufferEncoding;\n}): string {\n    return hash(secureSecret, Buffer.from(data, bufferEncode), hashAlgorithm);\n}\n\nexport function verifySecureHash({\n    data,\n    hashAlgorithm,\n    receivedHash,\n    secureSecret,\n}: {\n    secureSecret: string;\n    data: string;\n    hashAlgorithm: HashAlgorithm;\n    receivedHash: string;\n}): boolean {\n    const calculatedHash = calculateSecureHash({ secureSecret, data, hashAlgorithm });\n    return calculatedHash === receivedHash;\n}\n","import {\n    GET_BANK_LIST_ENDPOINT,\n    PAYMENT_ENDPOINT,\n    QUERY_DR_REFUND_ENDPOINT,\n    QUERY_DR_RESPONSE_MAP,\n    REFUND_RESPONSE_MAP,\n    VNPAY_GATEWAY_SANDBOX_HOST,\n    VNP_DEFAULT_COMMAND,\n    VNP_VERSION,\n    WRONG_CHECKSUM_KEY,\n    numberRegex,\n} from './constants';\nimport { HashAlgorithm, ProductCode, VnpCurrCode, VnpLocale } from './enums';\nimport type {\n    BuildPaymentUrl,\n    BuildPaymentUrlLogger,\n    BuildPaymentUrlOptions,\n    ReturnQueryFromVNPay,\n    VNPayConfig,\n    VerifyIpnCall,\n    VerifyIpnCallLogger,\n    VerifyIpnCallOptions,\n    VerifyReturnUrl,\n    VerifyReturnUrlLogger,\n    VerifyReturnUrlOptions,\n} from './types';\nimport type { Bank } from './types/bank.type';\nimport type { DefaultConfig, GlobalConfig } from './types/common.type';\nimport type { LoggerOptions } from './types/logger.type';\nimport type {\n    BodyRequestQueryDr,\n    QueryDr,\n    QueryDrResponse,\n    QueryDrResponseFromVNPay,\n    QueryDrResponseLogger,\n    QueryDrResponseOptions,\n} from './types/query-dr.type';\nimport type {\n    Refund,\n    RefundOptions,\n    RefundResponse,\n    RefundResponseFromVNPay,\n    RefundResponseLogger,\n} from './types/refund.type';\nimport { consoleLogger, ignoreLogger } from './utils';\nimport {\n    dateFormat,\n    getDateInGMT7,\n    getResponseByStatusCode,\n    hash,\n    isValidVnpayDateFormat,\n    resolveUrlString,\n} from './utils/common';\nimport {\n    buildPaymentUrlSearchParams,\n    calculateSecureHash,\n    createPaymentUrl,\n    verifySecureHash,\n} from './utils/payment.util';\n\n/**\n * Lớp hỗ trợ thanh toán qua VNPay\n * @en VNPay class to support VNPay payment\n * @see https://sandbox.vnpayment.vn/apis/docs/thanh-toan-pay/pay.html\n *\n * @example\n * import { VNPay } from 'vnpay';\n *\n * const vnpay = new VNPay({\n *     api_Host: 'https://sandbox.vnpayment.vn',\n *     tmnCode: 'TMNCODE',\n *     secureSecret: 'SERCRET',\n *     testMode: true, // optional\n *     hashAlgorithm: 'SHA512', // optional\n *     paymentEndpoint: 'paymentv2/vpcpay.html', // optional\n * });\n *\n * const tnx = '12345678'; // Generate your own transaction code\n * const urlString = vnpay.buildPaymentUrl({\n *     vnp_Amount: 100000,\n *      vnp_IpAddr: '192.168.0.1',\n *      vnp_ReturnUrl: 'http://localhost:8888/order/vnpay_return',\n *      vnp_TxnRef: tnx,\n *      vnp_OrderInfo: `Thanh toan cho ma GD: ${tnx}`,\n * }),\n *\n */\nexport class VNPay {\n    private globalDefaultConfig: GlobalConfig;\n    private HASH_ALGORITHM = HashAlgorithm.SHA512;\n    private BUFFER_ENCODE: BufferEncoding = 'utf-8';\n    private isEnableLog = false;\n    private readonly globalLoggerFn = (data: unknown) => {};\n\n    public constructor({\n        vnpayHost = VNPAY_GATEWAY_SANDBOX_HOST,\n        vnp_Version = VNP_VERSION,\n        vnp_CurrCode = VnpCurrCode.VND,\n        vnp_Locale = VnpLocale.VN,\n        testMode = false,\n        paymentEndpoint = PAYMENT_ENDPOINT,\n        ...config\n    }: VNPayConfig) {\n        if (testMode) {\n            vnpayHost = VNPAY_GATEWAY_SANDBOX_HOST;\n        }\n\n        if (config?.hashAlgorithm) {\n            this.HASH_ALGORITHM = config.hashAlgorithm;\n        }\n\n        if (config?.enableLog) {\n            this.isEnableLog = config.enableLog;\n            // Default logger to console\n            this.globalLoggerFn = consoleLogger;\n        }\n\n        if (config?.loggerFn) {\n            // Custom logger function\n            this.globalLoggerFn = config.loggerFn;\n        }\n\n        this.globalDefaultConfig = {\n            vnpayHost,\n            vnp_Version,\n            vnp_CurrCode,\n            vnp_Locale,\n            vnp_OrderType: ProductCode.Other,\n            vnp_Command: VNP_DEFAULT_COMMAND,\n            ...config,\n        };\n    }\n\n    /**\n     * Lấy cấu hình mặc định của VNPay\n     * @en Get default config of VNPay\n     */\n    public get defaultConfig(): DefaultConfig {\n        return {\n            vnp_TmnCode: this.globalDefaultConfig.tmnCode,\n            vnp_Version: this.globalDefaultConfig.vnp_Version,\n            vnp_CurrCode: this.globalDefaultConfig.vnp_CurrCode,\n            vnp_Locale: this.globalDefaultConfig.vnp_Locale,\n            vnp_Command: this.globalDefaultConfig.vnp_Command,\n            vnp_OrderType: this.globalDefaultConfig.vnp_OrderType,\n        };\n    }\n\n    /**\n     *\n     * @returns {Promise<Bank[]>} List of banks\n     */\n    public async getBankList(): Promise<Bank[]> {\n        const response = await fetch(\n            resolveUrlString(\n                this.globalDefaultConfig.vnpayHost ?? VNPAY_GATEWAY_SANDBOX_HOST,\n                GET_BANK_LIST_ENDPOINT,\n            ),\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                body: `tmn_code=${this.globalDefaultConfig.tmnCode}`,\n            },\n        );\n        const bankList = (await response.json()) as Bank[];\n        for (const bank of bankList) {\n            bank.logo_link = resolveUrlString(\n                this.globalDefaultConfig.vnpayHost ?? VNPAY_GATEWAY_SANDBOX_HOST,\n                bank.logo_link.slice(1),\n            );\n        }\n        return bankList;\n    }\n\n    /**\n     * Phương thức xây dựng, tạo thành url thanh toán của VNPay\n     * @en Build the payment url\n     *\n     * @param {BuildPaymentUrl} data - Payload that contains the information to build the payment url\n     * @returns {string} The payment url string\n     * @see https://sandbox.vnpayment.vn/apis/docs/thanh-toan-pay/pay.html#tao-url-thanh-toan\n     */\n    public buildPaymentUrl<LoggerFields extends keyof BuildPaymentUrlLogger>(\n        data: BuildPaymentUrl,\n        options?: BuildPaymentUrlOptions<LoggerFields>,\n    ): string {\n        const dataToBuild = {\n            ...this.defaultConfig,\n            ...data,\n\n            /**\n             * Multiply by 100 to follow VNPay standard, see docs for more detail\n             */\n            vnp_Amount: data.vnp_Amount * 100,\n        };\n\n        if (dataToBuild?.vnp_ExpireDate && !isValidVnpayDateFormat(dataToBuild.vnp_ExpireDate)) {\n            // Because the URL still works without vnp_ExpireDate, we keep it optional here.\n            // TODO: make it required when VNPAY's `vnp_ExpireDate` is required\n            throw new Error(\n                'Invalid vnp_ExpireDate format. use `formatDate` utility function to format it',\n            );\n        }\n\n        if (!isValidVnpayDateFormat(dataToBuild?.vnp_CreateDate ?? 0)) {\n            const timeGMT7 = getDateInGMT7();\n            dataToBuild.vnp_CreateDate = dateFormat(timeGMT7, 'yyyyMMddHHmmss');\n        }\n\n        const redirectUrl = createPaymentUrl({\n            config: this.globalDefaultConfig,\n            data: dataToBuild,\n        });\n\n        const signed = calculateSecureHash({\n            secureSecret: this.globalDefaultConfig.secureSecret,\n            data: redirectUrl.search.slice(1).toString(),\n            hashAlgorithm: this.HASH_ALGORITHM,\n            bufferEncode: this.BUFFER_ENCODE,\n        });\n        redirectUrl.searchParams.append('vnp_SecureHash', signed);\n\n        if (this.isEnableLog) {\n            const data2Log: BuildPaymentUrlLogger = {\n                createdAt: new Date(),\n                method: this.buildPaymentUrl.name,\n                paymentUrl: options?.withHash\n                    ? redirectUrl.toString()\n                    : (() => {\n                          const cloneUrl = new URL(redirectUrl.toString());\n                          cloneUrl.searchParams.delete('vnp_SecureHash');\n                          return cloneUrl.toString();\n                      })(),\n                ...dataToBuild,\n            };\n            this.logData(data2Log, options);\n        }\n\n        return redirectUrl.toString();\n    }\n\n    /**\n     * Phương thức xác thực tính đúng đắn của các tham số trả về từ VNPay\n     * @en Method to verify the return url from VNPay\n     *\n     * @param {ReturnQueryFromVNPay} query - The object of data return from VNPay\n     * @returns {VerifyReturnUrl} The return object\n     * @see https://sandbox.vnpayment.vn/apis/docs/thanh-toan-pay/pay.html#code-returnurl\n     */\n    public verifyReturnUrl<LoggerFields extends keyof VerifyReturnUrlLogger>(\n        query: ReturnQueryFromVNPay,\n        options?: VerifyReturnUrlOptions<LoggerFields>,\n    ): VerifyReturnUrl {\n        const { vnp_SecureHash = '', vnp_SecureHashType, ...cloneQuery } = query;\n\n        if (typeof cloneQuery?.vnp_Amount !== 'number') {\n            const isValidAmount = numberRegex.test(cloneQuery?.vnp_Amount ?? '');\n            if (!isValidAmount) {\n                throw new Error('Invalid amount');\n            }\n            cloneQuery.vnp_Amount = Number(cloneQuery.vnp_Amount);\n        }\n\n        const searchParams = buildPaymentUrlSearchParams(cloneQuery);\n        const isVerified = verifySecureHash({\n            secureSecret: this.globalDefaultConfig.secureSecret,\n            data: searchParams.toString(),\n            hashAlgorithm: this.HASH_ALGORITHM,\n            receivedHash: vnp_SecureHash,\n        });\n\n        let outputResults = {\n            isVerified,\n            isSuccess: cloneQuery.vnp_ResponseCode === '00',\n            message: getResponseByStatusCode(\n                cloneQuery.vnp_ResponseCode?.toString() ?? '',\n                this.globalDefaultConfig.vnp_Locale,\n            ),\n        };\n\n        if (!isVerified) {\n            outputResults = {\n                ...outputResults,\n                message: 'Wrong checksum',\n            };\n        }\n\n        const result = {\n            ...cloneQuery,\n            ...outputResults,\n            vnp_Amount: cloneQuery.vnp_Amount / 100,\n        };\n\n        if (this.isEnableLog) {\n            const data2Log: VerifyReturnUrlLogger = {\n                createdAt: new Date(),\n                method: this.verifyReturnUrl.name,\n                ...result,\n                vnp_SecureHash: options?.withHash ? vnp_SecureHash : undefined,\n            };\n\n            this.logData(data2Log, options);\n        }\n\n        return result;\n    }\n\n    /**\n     * Phương thức xác thực tính đúng đắn của lời gọi ipn từ VNPay\n     *\n     * Sau khi nhận được lời gọi, hệ thống merchant cần xác thực dữ liệu nhận được từ VNPay, kiểm tra đơn hàng có hợp lệ không, kiểm tra số tiền thanh toán có đúng không.\n     *\n     * Sau đó phản hồi lại VNPay kết quả xác thực thông qua các `IpnResponse`\n     *\n     * @en Method to verify the ipn url from VNPay\n     *\n     * After receiving the call, the merchant system needs to verify the data received from VNPay, check if the order is valid, check if the payment amount is correct.\n     *\n     * Then respond to VNPay the verification result through the `IpnResponse`\n     *\n     * @param {ReturnQueryFromVNPay} query The object of data return from VNPay\n     * @returns {VerifyIpnCall} The return object\n     * @see https://sandbox.vnpayment.vn/apis/docs/thanh-toan-pay/pay.html#code-ipn-url\n     */\n    public verifyIpnCall<LoggerFields extends keyof VerifyIpnCallLogger>(\n        query: ReturnQueryFromVNPay,\n        options?: VerifyIpnCallOptions<LoggerFields>,\n    ): VerifyIpnCall {\n        const hash = query.vnp_SecureHash;\n        const result = this.verifyReturnUrl(query, { logger: { loggerFn: ignoreLogger } });\n\n        if (this.isEnableLog) {\n            let data2Log: VerifyIpnCallLogger = {\n                createdAt: new Date(),\n                method: this.verifyIpnCall.name,\n                ...result,\n            };\n\n            if (options?.withHash) {\n                data2Log = {\n                    ...data2Log,\n                    vnp_SecureHash: hash,\n                };\n            }\n\n            this.logData(data2Log, options);\n        }\n\n        return result;\n    }\n\n    /**\n     * Đây là API để hệ thống merchant truy vấn kết quả thanh toán của giao dịch tại hệ thống VNPAY.\n     *\n     * @en This is the API for the merchant system to query the payment result of the transaction at the VNPAY system.\n     *\n     * @param {QueryDr} query - The data to query payment result\n     * @returns {Promise<QueryDrResponse>} The data return from VNPay and after verified\n     * @see https://sandbox.vnpayment.vn/apis/docs/truy-van-hoan-tien/querydr&refund.html#truy-van-ket-qua-thanh-toan-PAY\n     */\n    public async queryDr<LoggerFields extends keyof QueryDrResponseLogger>(\n        query: QueryDr,\n        options?: QueryDrResponseOptions<LoggerFields>,\n    ): Promise<QueryDrResponse> {\n        const command = 'querydr';\n        const dataQuery = {\n            vnp_Version: this.globalDefaultConfig.vnp_Version ?? VNP_VERSION,\n            ...query,\n        };\n\n        const url = new URL(\n            resolveUrlString(\n                this.globalDefaultConfig.vnpayHost ?? VNPAY_GATEWAY_SANDBOX_HOST,\n                QUERY_DR_REFUND_ENDPOINT,\n            ),\n        );\n\n        const stringToCreateHash = [\n            dataQuery.vnp_RequestId,\n            dataQuery.vnp_Version,\n            command,\n            this.globalDefaultConfig.tmnCode,\n            dataQuery.vnp_TxnRef,\n            dataQuery.vnp_TransactionDate,\n            dataQuery.vnp_CreateDate,\n            dataQuery.vnp_IpAddr,\n            dataQuery.vnp_OrderInfo,\n        ]\n            .map(String)\n            .join('|')\n            .replace(/undefined/g, '');\n\n        const requestHashed = hash(\n            this.globalDefaultConfig.secureSecret,\n            Buffer.from(stringToCreateHash, this.BUFFER_ENCODE),\n            this.HASH_ALGORITHM,\n        );\n\n        const body: BodyRequestQueryDr = {\n            ...dataQuery,\n            vnp_Command: command,\n            vnp_TmnCode: this.globalDefaultConfig.tmnCode,\n            vnp_SecureHash: requestHashed,\n        };\n\n        const response = await fetch(url.toString(), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(body),\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const responseData = (await response.json()) as QueryDrResponseFromVNPay;\n\n        const message = getResponseByStatusCode(\n            responseData.vnp_ResponseCode?.toString() ?? '',\n            this.globalDefaultConfig.vnp_Locale,\n            QUERY_DR_RESPONSE_MAP,\n        );\n        let outputResults = {\n            isVerified: true,\n            isSuccess:\n                responseData.vnp_ResponseCode === '00' || responseData.vnp_ResponseCode === 0,\n            message,\n            ...responseData,\n            vnp_Message: message,\n        };\n\n        const stringToCreateHashOfResponse = [\n            responseData.vnp_ResponseId,\n            responseData.vnp_Command,\n            responseData.vnp_ResponseCode,\n            responseData.vnp_Message,\n            this.defaultConfig.vnp_TmnCode,\n            responseData.vnp_TxnRef,\n            responseData.vnp_Amount,\n            responseData.vnp_BankCode,\n            responseData.vnp_PayDate,\n            responseData.vnp_TransactionNo,\n            responseData.vnp_TransactionType,\n            responseData.vnp_TransactionStatus,\n            responseData.vnp_OrderInfo,\n            responseData.vnp_PromotionCode,\n            responseData.vnp_PromotionAmount,\n        ]\n            .map(String)\n            .join('|')\n            .replace(/undefined/g, '');\n\n        const responseHashed = hash(\n            this.globalDefaultConfig.secureSecret,\n            Buffer.from(stringToCreateHashOfResponse, this.BUFFER_ENCODE),\n            this.HASH_ALGORITHM,\n        );\n\n        if (responseData?.vnp_SecureHash && responseHashed !== responseData.vnp_SecureHash) {\n            outputResults = {\n                ...outputResults,\n                isVerified: false,\n                message: getResponseByStatusCode(\n                    WRONG_CHECKSUM_KEY,\n                    this.globalDefaultConfig.vnp_Locale,\n                    QUERY_DR_RESPONSE_MAP,\n                ),\n            };\n        }\n\n        if (this.isEnableLog) {\n            const data2Log: QueryDrResponseLogger = {\n                createdAt: new Date(),\n                method: this.queryDr.name,\n                ...outputResults,\n            };\n\n            this.logData(data2Log, options);\n        }\n\n        return outputResults;\n    }\n\n    /**\n     * Đây là API để hệ thống merchant gửi yêu cầu hoàn tiền cho giao dịch qua hệ thống Cổng thanh toán VNPAY.\n     *\n     * @en This is the API for the merchant system to refund the transaction at the VNPAY system.\n     * @param {Refund} data - The data to request refund\n     * @returns The data return from VNPay\n     * @see https://sandbox.vnpayment.vn/apis/docs/truy-van-hoan-tien/querydr&refund.html#hoan-tien-thanh-toan-PAY\n     */\n    public async refund<LoggerFields extends keyof RefundResponseLogger>(\n        data: Refund,\n        options?: RefundOptions<LoggerFields>,\n    ): Promise<RefundResponse> {\n        const vnp_Command = 'refund';\n        const DEFAULT_TRANSACTION_NO_IF_NOT_EXIST = '0';\n        const dataQuery = {\n            ...data,\n            vnp_Command,\n            vnp_Version: this.globalDefaultConfig.vnp_Version,\n            vnp_TmnCode: this.globalDefaultConfig.tmnCode,\n            vnp_Amount: data.vnp_Amount * 100,\n        };\n        const {\n            vnp_Version,\n            vnp_TmnCode,\n            vnp_RequestId,\n            vnp_TransactionType,\n            vnp_TxnRef,\n            vnp_TransactionNo = '0',\n            vnp_TransactionDate,\n            vnp_CreateBy,\n            vnp_CreateDate,\n            vnp_IpAddr,\n            vnp_OrderInfo,\n        } = dataQuery;\n\n        const url = new URL(\n            resolveUrlString(\n                this.globalDefaultConfig.vnpayHost ?? VNPAY_GATEWAY_SANDBOX_HOST,\n                QUERY_DR_REFUND_ENDPOINT,\n            ),\n        );\n\n        const stringToHashOfRequest = [\n            vnp_RequestId,\n            vnp_Version,\n            vnp_Command,\n            vnp_TmnCode,\n            vnp_TransactionType,\n            vnp_TxnRef,\n            dataQuery.vnp_Amount,\n            vnp_TransactionNo,\n            vnp_TransactionDate,\n            vnp_CreateBy,\n            vnp_CreateDate,\n            vnp_IpAddr,\n            vnp_OrderInfo,\n        ]\n            .map(String)\n            .join('|')\n            .replace(/undefined/g, '');\n\n        const requestHashed = hash(\n            this.globalDefaultConfig.secureSecret,\n            Buffer.from(stringToHashOfRequest, this.BUFFER_ENCODE),\n            this.HASH_ALGORITHM,\n        );\n\n        const body = {\n            ...dataQuery,\n            vnp_SecureHash: requestHashed,\n        };\n\n        const response = await fetch(url.toString(), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(body),\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const responseData = (await response.json()) as RefundResponseFromVNPay;\n\n        if (responseData?.vnp_Amount) {\n            responseData.vnp_Amount = responseData.vnp_Amount / 100;\n        }\n\n        const message = getResponseByStatusCode(\n            responseData.vnp_ResponseCode?.toString() ?? '',\n            data?.vnp_Locale ?? this.globalDefaultConfig.vnp_Locale,\n            REFUND_RESPONSE_MAP,\n        );\n        let outputResults = {\n            isVerified: true,\n            isSuccess:\n                responseData.vnp_ResponseCode === '00' || responseData.vnp_ResponseCode === 0,\n            message,\n            ...responseData,\n            vnp_Message: message,\n        };\n\n        // Only check signed hash when request is not error\n        if (\n            Number(responseData.vnp_ResponseCode) <= 90 &&\n            Number(responseData.vnp_ResponseCode) >= 99\n        ) {\n            const stringToCreateHashOfResponse = [\n                responseData.vnp_ResponseId,\n                responseData.vnp_Command,\n                responseData.vnp_ResponseCode,\n                responseData.vnp_Message,\n                responseData.vnp_TmnCode,\n                responseData.vnp_TxnRef,\n                responseData.vnp_Amount,\n                responseData.vnp_BankCode,\n                responseData.vnp_PayDate,\n                responseData.vnp_TransactionNo ?? DEFAULT_TRANSACTION_NO_IF_NOT_EXIST,\n                responseData.vnp_TransactionType,\n                responseData.vnp_TransactionStatus,\n                responseData.vnp_OrderInfo,\n            ]\n                .map(String)\n                .join('|')\n                .replace(/undefined/g, '');\n\n            const responseHashed = hash(\n                this.globalDefaultConfig.secureSecret,\n                Buffer.from(stringToCreateHashOfResponse, this.BUFFER_ENCODE),\n                this.HASH_ALGORITHM,\n            );\n\n            if (responseData?.vnp_SecureHash && responseHashed !== responseData.vnp_SecureHash) {\n                outputResults = {\n                    ...outputResults,\n                    isVerified: false,\n                    message: getResponseByStatusCode(\n                        WRONG_CHECKSUM_KEY,\n                        this.globalDefaultConfig.vnp_Locale,\n                        REFUND_RESPONSE_MAP,\n                    ),\n                };\n            }\n        }\n\n        if (this.isEnableLog) {\n            const data2Log: RefundResponseLogger = {\n                createdAt: new Date(),\n                method: this.refund.name,\n                ...outputResults,\n            };\n\n            this.logData(data2Log, options);\n        }\n\n        return outputResults;\n    }\n\n    private logData<T extends object, LoggerFields extends keyof T>(\n        data: T,\n        options?: LoggerOptions<T, LoggerFields>,\n    ): void {\n        if (options?.logger && 'fields' in options.logger) {\n            const { type, fields } = options.logger;\n\n            for (const key of Object.keys(data)) {\n                const keyAssert = key as unknown as LoggerFields;\n                if (\n                    (type === 'omit' && fields.includes(keyAssert)) ||\n                    (type === 'pick' && !fields.includes(keyAssert))\n                ) {\n                    delete data[keyAssert];\n                }\n            }\n        }\n\n        // Exec logger function, or default global logger\n        (options?.logger?.loggerFn || this.globalLoggerFn)(data);\n    }\n}\n"]}