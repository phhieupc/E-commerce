import ie from "crypto";
import { tz, utc } from "moment-timezone";
import * as Q from "fs";
var d = "WRONG_CHECKSUM_KEY",
	F = new Map([
		["00", { vn: "Giao d\u1ECBch th\xE0nh c\xF4ng", en: "Approved" }],
		[
			"01",
			{
				vn: "Giao d\u1ECBch \u0111\xE3 t\u1ED3n t\u1EA1i",
				en: "Transaction is already exist",
			},
		],
		[
			"02",
			{
				vn: "Merchant kh\xF4ng h\u1EE3p l\u1EC7 (ki\u1EC3m tra l\u1EA1i vnp_TmnCode)",
				en: "Invalid merchant (check vnp_TmnCode value)",
			},
		],
		[
			"03",
			{
				vn: "D\u1EEF li\u1EC7u g\u1EEDi sang kh\xF4ng \u0111\xFAng \u0111\u1ECBnh d\u1EA1ng",
				en: "Sent data is not in the right format",
			},
		],
		[
			"04",
			{
				vn: "Kh\u1EDFi t\u1EA1o GD kh\xF4ng th\xE0nh c\xF4ng do Website \u0111ang b\u1ECB t\u1EA1m kho\xE1",
				en: "Payment website is not available",
			},
		],
		[
			"05",
			{
				vn: "Giao d\u1ECBch kh\xF4ng th\xE0nh c\xF4ng do: Qu\xFD kh\xE1ch nh\u1EADp sai m\u1EADt kh\u1EA9u thanh to\xE1n qu\xE1 s\u1ED1 l\u1EA7n quy \u0111\u1ECBnh. Xin qu\xFD kh\xE1ch vui l\xF2ng th\u1EF1c hi\u1EC7n l\u1EA1i giao d\u1ECBch",
				en: "Transaction failed: Too many wrong password input",
			},
		],
		[
			"06",
			{
				vn: "Giao d\u1ECBch kh\xF4ng th\xE0nh c\xF4ng do Qu\xFD kh\xE1ch nh\u1EADp sai m\u1EADt kh\u1EA9u x\xE1c th\u1EF1c giao d\u1ECBch (OTP). Xin qu\xFD kh\xE1ch vui l\xF2ng th\u1EF1c hi\u1EC7n l\u1EA1i giao d\u1ECBch.",
				en: "Transaction failed: Wrong OTP input",
			},
		],
		[
			"07",
			{
				vn: "Tr\u1EEB ti\u1EC1n th\xE0nh c\xF4ng. Giao d\u1ECBch b\u1ECB nghi ng\u1EDD (li\xEAn quan t\u1EDBi l\u1EEBa \u0111\u1EA3o, giao d\u1ECBch b\u1EA5t th\u01B0\u1EDDng). \u0110\u1ED1i v\u1EDBi giao d\u1ECBch n\xE0y c\u1EA7n merchant x\xE1c nh\u1EADn th\xF4ng qua merchant admin: T\u1EEB ch\u1ED1i/\u0110\u1ED3ng \xFD giao d\u1ECBch",
				en: "This transaction is suspicious",
			},
		],
		[
			"08",
			{
				vn: "Giao d\u1ECBch kh\xF4ng th\xE0nh c\xF4ng do: H\u1EC7 th\u1ED1ng Ng\xE2n h\xE0ng \u0111ang b\u1EA3o tr\xEC. Xin qu\xFD kh\xE1ch t\u1EA1m th\u1EDDi kh\xF4ng th\u1EF1c hi\u1EC7n giao d\u1ECBch b\u1EB1ng th\u1EBB/t\xE0i kho\u1EA3n c\u1EE7a Ng\xE2n h\xE0ng n\xE0y.",
				en: "Transaction failed: The banking system is under maintenance. Please do not temporarily make transactions by card / account of this Bank.",
			},
		],
		[
			"09",
			{
				vn: "Giao d\u1ECBch kh\xF4ng th\xE0nh c\xF4ng do: Th\u1EBB/T\xE0i kho\u1EA3n c\u1EE7a kh\xE1ch h\xE0ng ch\u01B0a \u0111\u0103ng k\xFD d\u1ECBch v\u1EE5 InternetBanking t\u1EA1i ng\xE2n h\xE0ng.",
				en: "Transaction failed: Cards / accounts of customer who has not yet registered for Internet Banking service.",
			},
		],
		[
			"10",
			{
				vn: "Giao d\u1ECBch kh\xF4ng th\xE0nh c\xF4ng do: Kh\xE1ch h\xE0ng x\xE1c th\u1EF1c th\xF4ng tin th\u1EBB/t\xE0i kho\u1EA3n kh\xF4ng \u0111\xFAng qu\xE1 3 l\u1EA7n",
				en: "Transaction failed: Customer incorrectly validate the card / account information more than 3 times",
			},
		],
		[
			"11",
			{
				vn: "Giao d\u1ECBch kh\xF4ng th\xE0nh c\xF4ng do: \u0110\xE3 h\u1EBFt h\u1EA1n ch\u1EDD thanh to\xE1n. Xin qu\xFD kh\xE1ch vui l\xF2ng th\u1EF1c hi\u1EC7n l\u1EA1i giao d\u1ECBch.",
				en: "Transaction failed: Pending payment is expired. Please try again.",
			},
		],
		[
			"24",
			{
				vn: "Giao d\u1ECBch kh\xF4ng th\xE0nh c\xF4ng do: Kh\xE1ch h\xE0ng h\u1EE7y giao d\u1ECBch",
				en: "Transaction canceled",
			},
		],
		[
			"51",
			{
				vn: "Giao d\u1ECBch kh\xF4ng th\xE0nh c\xF4ng do: T\xE0i kho\u1EA3n c\u1EE7a qu\xFD kh\xE1ch kh\xF4ng \u0111\u1EE7 s\u1ED1 d\u01B0 \u0111\u1EC3 th\u1EF1c hi\u1EC7n giao d\u1ECBch.",
				en: "Transaction failed: Your account is not enough balance to make the transaction.",
			},
		],
		[
			"65",
			{
				vn: "Giao d\u1ECBch kh\xF4ng th\xE0nh c\xF4ng do: T\xE0i kho\u1EA3n c\u1EE7a Qu\xFD kh\xE1ch \u0111\xE3 v\u01B0\u1EE3t qu\xE1 h\u1EA1n m\u1EE9c giao d\u1ECBch trong ng\xE0y.",
				en: "Transaction failed: Your account has exceeded the daily limit.",
			},
		],
		[
			"75",
			{
				vn: "Ng\xE2n h\xE0ng thanh to\xE1n \u0111ang b\u1EA3o tr\xEC",
				en: "Banking system is under maintenance",
			},
		],
		[d, { vn: "Sai checksum", en: "Wrong checksum" }],
		["default", { vn: "Giao d\u1ECBch th\u1EA5t b\u1EA1i", en: "Failure" }],
	]),
	A = new Map([
		["00", { vn: "Y\xEAu c\u1EA7u th\xE0nh c\xF4ng", en: "Success" }],
		[
			"02",
			{
				vn: "M\xE3 \u0111\u1ECBnh danh k\u1EBFt n\u1ED1i kh\xF4ng h\u1EE3p l\u1EC7 (ki\u1EC3m tra l\u1EA1i TmnCode)",
				en: "Invalid connection identifier (check TmnCode)",
			},
		],
		[
			"03",
			{
				vn: "D\u1EEF li\u1EC7u g\u1EEDi sang kh\xF4ng \u0111\xFAng \u0111\u1ECBnh d\u1EA1ng",
				en: "Sent data is not in the right format",
			},
		],
		[
			"91",
			{
				vn: "Kh\xF4ng t\xECm th\u1EA5y giao d\u1ECBch y\xEAu c\u1EA7u",
				en: "Transaction not found for request",
			},
		],
		[
			"94",
			{
				vn: "Y\xEAu c\u1EA7u tr\xF9ng l\u1EB7p, duplicate request trong th\u1EDDi gian gi\u1EDBi h\u1EA1n c\u1EE7a API",
				en: "Duplicate request within the time limit of the API",
			},
		],
		[
			"97",
			{ vn: "Checksum kh\xF4ng h\u1EE3p l\u1EC7", en: "Invalid checksum" },
		],
		[
			"99",
			{
				vn: "C\xE1c l\u1ED7i kh\xE1c (l\u1ED7i c\xF2n l\u1EA1i, kh\xF4ng c\xF3 trong danh s\xE1ch m\xE3 l\u1ED7i \u0111\xE3 li\u1EC7t k\xEA)",
				en: "Other errors (remaining errors, not in the list of error codes listed)",
			},
		],
		[d, { vn: "Sai checksum", en: "Wrong checksum" }],
		["default", { vn: "Giao d\u1ECBch th\u1EA5t b\u1EA1i", en: "Failure" }],
	]),
	N = new Map([
		["00", { vn: "Y\xEAu c\u1EA7u th\xE0nh c\xF4ng", en: "Success" }],
		[
			"02",
			{
				vn: "M\xE3 \u0111\u1ECBnh danh k\u1EBFt n\u1ED1i kh\xF4ng h\u1EE3p l\u1EC7 (ki\u1EC3m tra l\u1EA1i TmnCode)",
				en: "Invalid connection identifier (check TmnCode)",
			},
		],
		[
			"03",
			{
				vn: "D\u1EEF li\u1EC7u g\u1EEDi sang kh\xF4ng \u0111\xFAng \u0111\u1ECBnh d\u1EA1ng",
				en: "Sent data is not in the right format",
			},
		],
		[
			"91",
			{
				vn: "Kh\xF4ng t\xECm th\u1EA5y giao d\u1ECBch y\xEAu c\u1EA7u ho\xE0n tr\u1EA3",
				en: "Transaction not found for request refund",
			},
		],
		[
			"94",
			{
				vn: "Giao d\u1ECBch \u0111\xE3 \u0111\u01B0\u1EE3c g\u1EEDi y\xEAu c\u1EA7u ho\xE0n ti\u1EC1n tr\u01B0\u1EDBc \u0111\xF3. Y\xEAu c\u1EA7u n\xE0y VNPAY \u0111ang x\u1EED l\xFD",
				en: "The transaction has been sent a refund request before. VNPAY is processing this request",
			},
		],
		[
			"95",
			{
				vn: "Giao d\u1ECBch n\xE0y kh\xF4ng th\xE0nh c\xF4ng b\xEAn VNPAY. VNPAY t\u1EEB ch\u1ED1i x\u1EED l\xFD y\xEAu c\u1EA7u",
				en: "This transaction is not successful from VNPAY. VNPAY refuses to process the request",
			},
		],
		[
			"97",
			{ vn: "Checksum kh\xF4ng h\u1EE3p l\u1EC7", en: "Invalid checksum" },
		],
		[
			"99",
			{
				vn: "C\xE1c l\u1ED7i kh\xE1c (l\u1ED7i c\xF2n l\u1EA1i, kh\xF4ng c\xF3 trong danh s\xE1ch m\xE3 l\u1ED7i \u0111\xE3 li\u1EC7t k\xEA)",
				en: "Other errors (remaining errors, not in the list of error codes listed)",
			},
		],
		[d, { vn: "Sai checksum", en: "Wrong checksum" }],
		["default", { vn: "Giao d\u1ECBch th\u1EA5t b\u1EA1i", en: "Failure" }],
	]),
	he = new Map([
		[
			"00",
			{
				vn: "Giao d\u1ECBch thanh to\xE1n th\xE0nh c\xF4ng",
				en: "Payment transaction successful",
			},
		],
		[
			"01",
			{
				vn: "Giao d\u1ECBch ch\u01B0a ho\xE0n t\u1EA5t",
				en: "Transaction not completed",
			},
		],
		["02", { vn: "Giao d\u1ECBch b\u1ECB l\u1ED7i", en: "Transaction error" }],
		[
			"04",
			{
				vn: "Giao d\u1ECBch \u0111\u1EA3o (Kh\xE1ch h\xE0ng \u0111\xE3 b\u1ECB tr\u1EEB ti\u1EC1n t\u1EA1i Ng\xE2n h\xE0ng nh\u01B0ng GD ch\u01B0a th\xE0nh c\xF4ng \u1EDF VNPAY)",
				en: "Transaction reverse (Customer has been deducted money at the Bank but the transaction is not successful at VNPAY)",
			},
		],
		[
			"05",
			{
				vn: "VNPAY \u0111ang x\u1EED l\xFD giao d\u1ECBch n\xE0y (GD ho\xE0n ti\u1EC1n)",
				en: "VNPAY is processing this transaction (refund)",
			},
		],
		[
			"06",
			{
				vn: "VNPAY \u0111\xE3 g\u1EEDi y\xEAu c\u1EA7u ho\xE0n ti\u1EC1n sang Ng\xE2n h\xE0ng (GD ho\xE0n ti\u1EC1n)",
				en: "VNPAY has sent a refund request to the Bank (refund)",
			},
		],
		[
			"07",
			{
				vn: "Giao d\u1ECBch b\u1ECB nghi ng\u1EDD gian l\u1EADn",
				en: "Transaction suspected of fraud",
			},
		],
		[
			"09",
			{
				vn: "GD Ho\xE0n tr\u1EA3 b\u1ECB t\u1EEB ch\u1ED1i",
				en: "Refund transaction is rejected",
			},
		],
		[d, { vn: "Sai checksum", en: "Wrong checksum" }],
	]);
var u = "https://sandbox.vnpayment.vn",
	D = "paymentv2/vpcpay.html",
	E = "merchant_webapi/api/transaction",
	U = "qrpayauth/api/merchant/get_bank_list";
var le = { RspCode: "00", Message: "Confirm Success" },
	ue = { RspCode: "01", Message: "Order not found" },
	de = { RspCode: "02", Message: "Order already confirmed" },
	fe = { RspCode: "03", Message: "IP prohibited" },
	me = { RspCode: "04", Message: "Invalid amount" },
	ve = { RspCode: "97", Message: "Fail checksum" },
	_e = { RspCode: "99", Message: "Unknown error" };
var M = /^[0-9]+$/;
var x = "2.1.0",
	w = "pay",
	De = "VND";
var B = ((h) => (
	(h.Food_Consumption = "100000"),
	(h.Phone_Tablet = "110000"),
	(h.ElectricAppliance = "120000"),
	(h.Computers_OfficeEquipment = "130000"),
	(h.Electronics_Sound = "140000"),
	(h.Books_Newspapers_Magazines = "150000"),
	(h.Sports_Picnics = "160000"),
	(h.Hotel_Tourism = "170000"),
	(h.Cuisine = "180000"),
	(h.Entertainment_Training = "190000"),
	(h.Fashion = "200000"),
	(h.Health_Beauty = "210000"),
	(h.Mother_Baby = "220000"),
	(h.KitchenUtensils = "230000"),
	(h.Vehicle = "240000"),
	(h.Pay = "250000"),
	(h.AirlineTickets = "250007"),
	(h.CardCode = "260000"),
	(h.Pharmacy_MedicalServices = "270000"),
	(h.Other = "other"),
	h
))(B || {});
var te = ((t) => (
		(t.sandbox = "https://sandbox.vnpayment.vn/paymentv2/vpcpay.html"), t
	))(te || {}),
	G = ((n) => (
		(n.SHA256 = "SHA256"), (n.SHA512 = "SHA512"), (n.MD5 = "MD5"), n
	))(G || {}),
	Y = ((t) => ((t.VND = "VND"), t))(Y || {}),
	L = ((e) => ((e.VN = "vn"), (e.EN = "en"), e))(L || {}),
	oe = ((e) => ((e.ATM = "ATM"), (e.QRCODE = "QRCODE"), e))(oe || {}),
	re = ((n) => (
		(n.PAYMENT = "01"), (n.FULL_REFUND = "02"), (n.PARTIAL_REFUND = "03"), n
	))(re || {}),
	se = ((e) => ((e.FULL_REFUND = "02"), (e.PARTIAL_REFUND = "03"), e))(
		se || {},
	);
function H(r) {
	return new Date(
		tz(r ?? new Date(), "Asia/Ho_Chi_Minh").format(
			"YYYY-MM-DDTHH:mm:ss.SSS[Z]",
		),
	);
}
function q(r, t = "yyyyMMddHHmmss") {
	let e = (p) => (p < 10 ? `0${p}` : p).toString(),
		n = r.getFullYear(),
		o = e(r.getMonth() + 1),
		s = e(r.getDate()),
		g = e(r.getHours()),
		c = e(r.getMinutes()),
		l = e(r.getSeconds());
	return Number(
		t
			.replace("yyyy", n.toString())
			.replace("MM", o)
			.replace("dd", s)
			.replace("HH", g)
			.replace("mm", c)
			.replace("ss", l),
	);
}
function Oe(r, t = "local") {
	let e = r.toString(),
		n = Number.parseInt,
		o = n(e.slice(0, 4)),
		s = n(e.slice(4, 6)) - 1,
		g = n(e.slice(6, 8)),
		c = n(e.slice(8, 10)),
		l = n(e.slice(10, 12)),
		p = n(e.slice(12, 14));
	switch (t) {
		case "utc":
			return new Date(
				utc([o, s, g, c, l, p], true).format("YYYY-MM-DDTHH:mm:ss.SSS[Z]"),
			);
		case "gmt7":
			return H(new Date(o, s, g, c, l, p));
		case "local":
		default:
			return new Date(o, s, g, c, l, p);
	}
}
function P(r) {
	let t = r.toString();
	return /^\d{4}(0[1-9]|1[0-2])(0[1-9]|[12][0-9]|3[01])([01][0-9]|2[0-3])[0-5][0-9][0-5][0-9]$/.test(
		t,
	);
}
function Ie(r, t) {
	let e = "",
		n = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
	t?.onlyNumber && (n = "0123456789");
	let o = n.length;
	for (let s = 0; s < r; s++) e += `${n[(Math.random() * o) | 0]}`;
	return e;
}
function _(r = "", t = "vn", e = F) {
	return (e.get(r) ?? e.get("default"))[t];
}
function f(r, t) {
	let e = r.trim(),
		n = t.trim();
	for (; e.endsWith("/") || e.endsWith("\\"); ) e = e.slice(0, -1);
	for (; n.startsWith("/") || n.startsWith("\\"); ) n = n.slice(1);
	return `${e}/${n}`;
}
function m(r, t, e) {
	return ie.createHmac(e, r).update(t.toString()).digest("hex");
}
function W() {}
function K(r, t = "log") {
	typeof console[t] == "function" && console[t](r);
}
function Fe(r, t, e) {
	let n = typeof r == "object" ? JSON.stringify(r) : String(r);
	Q.appendFile(
		t,
		`${n}
`,
		(o) => {
			if (o && typeof e == "function") return e(o);
			if (o) throw (console.error("Failed to write to file:", o), o);
		},
	);
}
function O(r) {
	let t = new URLSearchParams(),
		e = Object.entries(r).sort(([n], [o]) =>
			n.toString().localeCompare(o.toString()),
		);
	for (let [n, o] of e)
		o === "" || o === void 0 || o === null || t.append(n, o.toString());
	return t;
}
function j({ config: r, data: t }) {
	let e = new URL(f(r.vnpayHost ?? u, r.paymentEndpoint ?? D));
	return (
		O(t).forEach((n, o) => {
			e.searchParams.set(o, n);
		}),
		e
	);
}
function I({
	bufferEncode: r = "utf-8",
	data: t,
	hashAlgorithm: e,
	secureSecret: n,
}) {
	return m(n, Buffer.from(t, r), e);
}
function $({ data: r, hashAlgorithm: t, receivedHash: e, secureSecret: n }) {
	return I({ secureSecret: n, data: r, hashAlgorithm: t }) === e;
}
var X = class {
	constructor({
		vnpayHost: t = u,
		vnp_Version: e = x,
		vnp_CurrCode: n = "VND",
		vnp_Locale: o = "vn",
		testMode: s = false,
		paymentEndpoint: g = D,
		...c
	}) {
		this.HASH_ALGORITHM = "SHA512";
		this.BUFFER_ENCODE = "utf-8";
		this.isEnableLog = false;
		this.globalLoggerFn = (t) => {};
		s && (t = u),
			c?.hashAlgorithm && (this.HASH_ALGORITHM = c.hashAlgorithm),
			c?.enableLog &&
				((this.isEnableLog = c.enableLog), (this.globalLoggerFn = K)),
			c?.loggerFn && (this.globalLoggerFn = c.loggerFn),
			(this.globalDefaultConfig = {
				vnpayHost: t,
				vnp_Version: e,
				vnp_CurrCode: n,
				vnp_Locale: o,
				vnp_OrderType: "other",
				vnp_Command: w,
				...c,
			});
	}
	get defaultConfig() {
		return {
			vnp_TmnCode: this.globalDefaultConfig.tmnCode,
			vnp_Version: this.globalDefaultConfig.vnp_Version,
			vnp_CurrCode: this.globalDefaultConfig.vnp_CurrCode,
			vnp_Locale: this.globalDefaultConfig.vnp_Locale,
			vnp_Command: this.globalDefaultConfig.vnp_Command,
			vnp_OrderType: this.globalDefaultConfig.vnp_OrderType,
		};
	}
	async getBankList() {
		let e = await (
			await fetch(f(this.globalDefaultConfig.vnpayHost ?? u, U), {
				method: "POST",
				headers: { "Content-Type": "application/x-www-form-urlencoded" },
				body: `tmn_code=${this.globalDefaultConfig.tmnCode}`,
			})
		).json();
		for (let n of e)
			n.logo_link = f(
				this.globalDefaultConfig.vnpayHost ?? u,
				n.logo_link.slice(1),
			);
		return e;
	}
	buildPaymentUrl(t, e) {
		let n = { ...this.defaultConfig, ...t, vnp_Amount: t.vnp_Amount * 100 };
		if (n?.vnp_ExpireDate && !P(n.vnp_ExpireDate))
			throw new Error(
				"Invalid vnp_ExpireDate format. use `formatDate` utility function to format it",
			);
		if (!P(n?.vnp_CreateDate ?? 0)) {
			let g = H();
			n.vnp_CreateDate = q(g, "yyyyMMddHHmmss");
		}
		let o = j({ config: this.globalDefaultConfig, data: n }),
			s = I({
				secureSecret: this.globalDefaultConfig.secureSecret,
				data: o.search.slice(1).toString(),
				hashAlgorithm: this.HASH_ALGORITHM,
				bufferEncode: this.BUFFER_ENCODE,
			});
		if ((o.searchParams.append("vnp_SecureHash", s), this.isEnableLog)) {
			let g = {
				createdAt: new Date(),
				method: this.buildPaymentUrl.name,
				paymentUrl: e?.withHash
					? o.toString()
					: (() => {
							let c = new URL(o.toString());
							return c.searchParams.delete("vnp_SecureHash"), c.toString();
						})(),
				...n,
			};
			this.logData(g, e);
		}
		return o.toString();
	}
	verifyReturnUrl(t, e) {
		let { vnp_SecureHash: n = "", vnp_SecureHashType: o, ...s } = t;
		if (typeof s?.vnp_Amount != "number") {
			if (!M.test(s?.vnp_Amount ?? "")) throw new Error("Invalid amount");
			s.vnp_Amount = Number(s.vnp_Amount);
		}
		let g = O(s),
			c = $({
				secureSecret: this.globalDefaultConfig.secureSecret,
				data: g.toString(),
				hashAlgorithm: this.HASH_ALGORITHM,
				receivedHash: n,
			}),
			l = {
				isVerified: c,
				isSuccess: s.vnp_ResponseCode === "00",
				message: _(
					s.vnp_ResponseCode?.toString() ?? "",
					this.globalDefaultConfig.vnp_Locale,
				),
			};
		c || (l = { ...l, message: "Wrong checksum" });
		let p = { ...s, ...l, vnp_Amount: s.vnp_Amount / 100 };
		if (this.isEnableLog) {
			let i = {
				createdAt: new Date(),
				method: this.verifyReturnUrl.name,
				...p,
				vnp_SecureHash: e?.withHash ? n : void 0,
			};
			this.logData(i, e);
		}
		return p;
	}
	verifyIpnCall(t, e) {
		let n = t.vnp_SecureHash,
			o = this.verifyReturnUrl(t, { logger: { loggerFn: W } });
		if (this.isEnableLog) {
			let s = { createdAt: new Date(), method: this.verifyIpnCall.name, ...o };
			e?.withHash && (s = { ...s, vnp_SecureHash: n }), this.logData(s, e);
		}
		return o;
	}
	async queryDr(t, e) {
		let n = "querydr",
			o = { vnp_Version: this.globalDefaultConfig.vnp_Version ?? x, ...t },
			s = new URL(f(this.globalDefaultConfig.vnpayHost ?? u, E)),
			g = [
				o.vnp_RequestId,
				o.vnp_Version,
				n,
				this.globalDefaultConfig.tmnCode,
				o.vnp_TxnRef,
				o.vnp_TransactionDate,
				o.vnp_CreateDate,
				o.vnp_IpAddr,
				o.vnp_OrderInfo,
			]
				.map(String)
				.join("|")
				.replace(/undefined/g, ""),
			c = m(
				this.globalDefaultConfig.secureSecret,
				Buffer.from(g, this.BUFFER_ENCODE),
				this.HASH_ALGORITHM,
			),
			l = {
				...o,
				vnp_Command: n,
				vnp_TmnCode: this.globalDefaultConfig.tmnCode,
				vnp_SecureHash: c,
			},
			p = await fetch(s.toString(), {
				method: "POST",
				headers: { "Content-Type": "application/json" },
				body: JSON.stringify(l),
			});
		if (!p.ok) throw new Error(`HTTP error! status: ${p.status}`);
		let i = await p.json(),
			y = _(
				i.vnp_ResponseCode?.toString() ?? "",
				this.globalDefaultConfig.vnp_Locale,
				A,
			),
			v = {
				isVerified: true,
				isSuccess: i.vnp_ResponseCode === "00" || i.vnp_ResponseCode === 0,
				message: y,
				...i,
				vnp_Message: y,
			},
			S = [
				i.vnp_ResponseId,
				i.vnp_Command,
				i.vnp_ResponseCode,
				i.vnp_Message,
				this.defaultConfig.vnp_TmnCode,
				i.vnp_TxnRef,
				i.vnp_Amount,
				i.vnp_BankCode,
				i.vnp_PayDate,
				i.vnp_TransactionNo,
				i.vnp_TransactionType,
				i.vnp_TransactionStatus,
				i.vnp_OrderInfo,
				i.vnp_PromotionCode,
				i.vnp_PromotionAmount,
			]
				.map(String)
				.join("|")
				.replace(/undefined/g, ""),
			C = m(
				this.globalDefaultConfig.secureSecret,
				Buffer.from(S, this.BUFFER_ENCODE),
				this.HASH_ALGORITHM,
			);
		if (
			(i?.vnp_SecureHash &&
				C !== i.vnp_SecureHash &&
				(v = {
					...v,
					isVerified: false,
					message: _(d, this.globalDefaultConfig.vnp_Locale, A),
				}),
			this.isEnableLog)
		) {
			let T = { createdAt: new Date(), method: this.queryDr.name, ...v };
			this.logData(T, e);
		}
		return v;
	}
	async refund(t, e) {
		let n = "refund",
			o = "0",
			s = {
				...t,
				vnp_Command: n,
				vnp_Version: this.globalDefaultConfig.vnp_Version,
				vnp_TmnCode: this.globalDefaultConfig.tmnCode,
				vnp_Amount: t.vnp_Amount * 100,
			},
			{
				vnp_Version: g,
				vnp_TmnCode: c,
				vnp_RequestId: l,
				vnp_TransactionType: p,
				vnp_TxnRef: i,
				vnp_TransactionNo: y = "0",
				vnp_TransactionDate: v,
				vnp_CreateBy: S,
				vnp_CreateDate: C,
				vnp_IpAddr: T,
				vnp_OrderInfo: J,
			} = s,
			z = new URL(f(this.globalDefaultConfig.vnpayHost ?? u, E)),
			Z = [l, g, n, c, p, i, s.vnp_Amount, y, v, S, C, T, J]
				.map(String)
				.join("|")
				.replace(/undefined/g, ""),
			ee = m(
				this.globalDefaultConfig.secureSecret,
				Buffer.from(Z, this.BUFFER_ENCODE),
				this.HASH_ALGORITHM,
			),
			h = { ...s, vnp_SecureHash: ee },
			b = await fetch(z.toString(), {
				method: "POST",
				headers: { "Content-Type": "application/json" },
				body: JSON.stringify(h),
			});
		if (!b.ok) throw new Error(`HTTP error! status: ${b.status}`);
		let a = await b.json();
		a?.vnp_Amount && (a.vnp_Amount = a.vnp_Amount / 100);
		let V = _(
				a.vnp_ResponseCode?.toString() ?? "",
				t?.vnp_Locale ?? this.globalDefaultConfig.vnp_Locale,
				N,
			),
			R = {
				isVerified: true,
				isSuccess: a.vnp_ResponseCode === "00" || a.vnp_ResponseCode === 0,
				message: V,
				...a,
				vnp_Message: V,
			};
		if (Number(a.vnp_ResponseCode) <= 90 && Number(a.vnp_ResponseCode) >= 99) {
			let k = [
					a.vnp_ResponseId,
					a.vnp_Command,
					a.vnp_ResponseCode,
					a.vnp_Message,
					a.vnp_TmnCode,
					a.vnp_TxnRef,
					a.vnp_Amount,
					a.vnp_BankCode,
					a.vnp_PayDate,
					a.vnp_TransactionNo ?? o,
					a.vnp_TransactionType,
					a.vnp_TransactionStatus,
					a.vnp_OrderInfo,
				]
					.map(String)
					.join("|")
					.replace(/undefined/g, ""),
				ne = m(
					this.globalDefaultConfig.secureSecret,
					Buffer.from(k, this.BUFFER_ENCODE),
					this.HASH_ALGORITHM,
				);
			a?.vnp_SecureHash &&
				ne !== a.vnp_SecureHash &&
				(R = {
					...R,
					isVerified: false,
					message: _(d, this.globalDefaultConfig.vnp_Locale, N),
				});
		}
		if (this.isEnableLog) {
			let k = { createdAt: new Date(), method: this.refund.name, ...R };
			this.logData(k, e);
		}
		return R;
	}
	logData(t, e) {
		if (e?.logger && "fields" in e.logger) {
			let { type: n, fields: o } = e.logger;
			for (let s of Object.keys(t)) {
				let g = s;
				((n === "omit" && o.includes(g)) || (n === "pick" && !o.includes(g))) &&
					delete t[g];
			}
		}
		(e?.logger?.loggerFn || this.globalLoggerFn)(t);
	}
};
export {
	De as CURR_CODE_VND,
	U as GET_BANK_LIST_ENDPOINT,
	G as HashAlgorithm,
	de as InpOrderAlreadyConfirmed,
	ve as IpnFailChecksum,
	me as IpnInvalidAmount,
	fe as IpnIpProhibited,
	ue as IpnOrderNotFound,
	le as IpnSuccess,
	_e as IpnUnknownError,
	D as PAYMENT_ENDPOINT,
	B as ProductCode,
	E as QUERY_DR_REFUND_ENDPOINT,
	A as QUERY_DR_RESPONSE_MAP,
	N as REFUND_RESPONSE_MAP,
	F as RESPONSE_MAP,
	se as RefundTransactionType,
	he as TRANSACTION_STATUS_RESPONSE_MAP,
	te as UrlService,
	u as VNPAY_GATEWAY_SANDBOX_HOST,
	w as VNP_DEFAULT_COMMAND,
	x as VNP_VERSION,
	X as VNPay,
	oe as VnpCardType,
	Y as VnpCurrCode,
	L as VnpLocale,
	re as VnpTransactionType,
	d as WRONG_CHECKSUM_KEY,
	O as buildPaymentUrlSearchParams,
	I as calculateSecureHash,
	K as consoleLogger,
	j as createPaymentUrl,
	q as dateFormat,
	Fe as fileLogger,
	Ie as generateRandomString,
	H as getDateInGMT7,
	_ as getResponseByStatusCode,
	m as hash,
	W as ignoreLogger,
	P as isValidVnpayDateFormat,
	M as numberRegex,
	Oe as parseDate,
	f as resolveUrlString,
	$ as verifySecureHash,
}; //# sourceMappingURL=index.js.map
//# sourceMappingURL=index.js.map
